<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GamerNoTitle</title>
  <icon>https://www.gravatar.com/avatar/898a1ce24f258d8b7863ec186021613a</icon>
  <subtitle>TECH OTAKUS SAVE THE WORLD</subtitle>
  <link href="https://bili33.top/atom.xml" rel="self"/>
  
  <link href="https://bili33.top/"/>
  <updated>2022-12-19T11:08:11.708Z</updated>
  <id>https://bili33.top/</id>
  
  <author>
    <name>GamerNoTitle</name>
    <email>admin@bili33.top</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>与新冠肺炎搏斗的那些日子</title>
    <link href="https://bili33.top/posts/Fight-against-COVID19/"/>
    <id>https://bili33.top/posts/Fight-against-COVID19/</id>
    <published>2022-12-19T10:53:30.000Z</published>
    <updated>2022-12-19T11:08:11.708Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>2022年12月18日下午，我感到十分地不适，在那之前，我们学院里有出现过COVID19（新冠肺炎）病例，所以整个学院都是在疫情管控状态，当我感受到我不适的那一刻我就知道，我很有可能是中招了。我第一次测量体温是37.4（刚刚过发烧线37.3），然后就把我丢到了临时的隔离房间去隔离去，说观察一个晚上再决定是否把我拉去隔离。</p><p>2022年12月18日晚，最后一次测量体温是38.1，此时的感觉是喉咙非常地干（话说这个自早上就是这样的了），而且四肢无力，特别是之前动过手术的左腿膝盖那个位置，很酸痛。</p><p>我就是带着各种不适的感觉睡了觉，期间起了三次，分别是十一点半、两点和四点</p><p>2022年12月19日，早上第一次测量体温，体温飙到了38.3度，这个被拉去隔离没跑了，早上四节课睡了两节课，中午就通知说去统一隔离点隔离，等中午过来以后第一次测了个体温，38.4，感觉头痛、四肢无力、喉咙干、有点流鼻涕、怕冷，来到隔离房间先倒头一睡，下午上课其实也心不在焉。等到了五点钟再测一次体温，好家伙直接给我干到了38.9度，稍微躺了躺感觉好了点，七点钟再测一次，体温下滑到了37.3度，虽然还是发烧，但是没那么严重了，症状轻了一些（当然也有可能是打了一下午COD的结果）</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 待更新 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Diary" scheme="https://bili33.top/categories/Diary/"/>
    
    
    <category term="Diary" scheme="https://bili33.top/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>使用Fly.io平台部署哔哩漫游服务器</title>
    <link href="https://bili33.top/posts/Deploy-biliroaming-go-server-with-flyio/"/>
    <id>https://bili33.top/posts/Deploy-biliroaming-go-server-with-flyio/</id>
    <published>2022-12-18T09:11:03.000Z</published>
    <updated>2022-12-19T11:21:04.022Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>做这个是因为之前 @wuki 问我说能不能用<a href="https://fly.io/">Deploy app servers close to your users · Fly</a>这个平台弄哔哩漫游服务器，然后借了我一个号，结果陆陆续续总共拖了将近半年才弄出来，在这留个记录。</p><div class="note warning flat"><p>请注意：fly.io平台免费账户需要信用卡验证后才能够部署项目！</p></div><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets/img/Deploy-biliroaming-go-server-with-flyio/msedge_EB3k3IEoNv.png"></p><hr><p>这里我们使用的项目是<a href="https://github.com/JasonKhew96/biliroaming-go-server">JasonKhew96&#x2F;biliroaming-go-server (github.com)</a></p><p>根据fly.io官方的文档，有以下地区可选（<a href="https://fly.io/docs/reference/regions/#fly-io-regions">Regions · Fly Docs</a>）</p><table><thead><tr><th>Region ID</th><th>Region Location</th><th>Gateway*</th></tr></thead><tbody><tr><td>ams</td><td>Amsterdam, Netherlands</td><td>✓</td></tr><tr><td>cdg</td><td>Paris, France</td><td>✓</td></tr><tr><td>den</td><td>Denver, Colorado (US)</td><td>✓</td></tr><tr><td>dfw</td><td>Dallas, Texas (US)</td><td>✓</td></tr><tr><td>ewr</td><td>Secaucus, NJ (US)</td><td></td></tr><tr><td>fra</td><td>Frankfurt, Germany</td><td>✓</td></tr><tr><td>gru</td><td>São Paulo</td><td></td></tr><tr><td><strong>hkg</strong></td><td><strong>Hong Kong, Hong Kong</strong></td><td><strong>✓</strong></td></tr><tr><td>iad</td><td>Ashburn, Virginia (US)</td><td></td></tr><tr><td>jnb</td><td>Johannesburg, South Africa</td><td></td></tr><tr><td>lax</td><td>Los Angeles, California (US)</td><td>✓</td></tr><tr><td>lhr</td><td>London, United Kingdom</td><td>✓</td></tr><tr><td>maa</td><td>Chennai (Madras), India</td><td>✓</td></tr><tr><td>mad</td><td>Madrid, Spain</td><td></td></tr><tr><td>mia</td><td>Miami, Florida (US)</td><td></td></tr><tr><td>nrt</td><td>Tokyo, Japan</td><td>✓</td></tr><tr><td>ord</td><td>Chicago, Illinois (US)</td><td>✓</td></tr><tr><td>otp</td><td>Bucharest, Romania</td><td></td></tr><tr><td>scl</td><td>Santiago, Chile</td><td>✓</td></tr><tr><td>sea</td><td>Seattle, Washington (US)</td><td>✓</td></tr><tr><td>sin</td><td>Singapore</td><td>✓</td></tr><tr><td>sjc</td><td>Sunnyvale, California (US)</td><td>✓</td></tr><tr><td>syd</td><td>Sydney, Australia</td><td>✓</td></tr><tr><td>waw</td><td>Warsaw, Poland</td><td></td></tr><tr><td>yul</td><td>Montreal, Canada</td><td></td></tr><tr><td>yyz</td><td>Toronto, Canada</td><td>✓</td></tr></tbody></table><p>在这里我们选择的就是香港地区(hkg)，在部署中，它的cli是把当前目录下的文件打包为docker镜像上传到它的镜像库中再进行部署的</p><h3 id="安装CLI"><a href="#安装CLI" class="headerlink" title="安装CLI"></a>安装CLI</h3><p>官网提供的安装方式如下</p><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><p>If you have the <a href="https://brew.sh/">Homebrew</a> package manager installed, flyctl can be installed by running:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install flyctl</span><br></pre></td></tr></table></figure><p>If not, you can run the install script:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://fly.io/install.sh | sh</span><br></pre></td></tr></table></figure><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>Run the install script:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://fly.io/install.sh | sh</span><br></pre></td></tr></table></figure><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>Run the Powershell install script:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">iwr</span> https://fly.io/install.ps1 <span class="literal">-useb</span> | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure><p>但是因为我的网络太小霸王了，所以我用了Github的Codespaces来作为中介去干这个</p><h4 id="使用Github-Codespaces"><a href="#使用Github-Codespaces" class="headerlink" title="使用Github Codespaces"></a>使用Github Codespaces</h4><p>在这个绿绿的<code>Code</code>按钮里面点到Codespaces，然后创建一个（我这里创建过了所以有一个）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets/img/Deploy-biliroaming-go-server-with-flyio/msedge_blfgaVum2p.png"></p><p>直接打开，可以在网页打开，也可以接入自己的Vscode，进入以后按快捷键<kbd>Ctrl</kbd> + <kbd>L-Shift</kbd> + <kbd>`</kbd>打开一个终端，并把安装<code>flyctl</code>的命令写进去</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets/img/Deploy-biliroaming-go-server-with-flyio/Code_IPvqowlcdn.png"></p><p>这样就是安装完毕了，估计是Codespaces的机制问题，所以需要通过绝对路径去访问它</p><p>输入一下命令来登录（这里我就不打绝对路径了，这里假设是用本地电脑且<code>flyctl</code>已经加入环境变量）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flyctl auth login</span></span><br></pre></td></tr></table></figure><p>然后终端会显示一个链接，如果你跟我一样用的是Codespaces，那就把这个链接放到自己的浏览器里面去访问登录就行了，如果你是本地运行，应该会自动打开登录页面（没截图，登录应该是小问题）</p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>首先打开<code>.gitignore</code>文件和<code>.dockerignore</code>文件（如果有的话），把里面的内容全部删掉，因为部署的时候我们是需要把配置文件给一起上传的，而<code>.gitignore</code>把这些文件都排除掉了，所以要删掉里面的所有内容</p><p>再打开<code>fly.toml</code>，在最底下加上这些内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[build.args]</span></span><br><span class="line">  <span class="attr">BP_KEEP_FILES</span> = <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>不这么做的后果↓</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2022-12-19T10:02:56.427 runner[86dbcaaa] hkg [info] Starting instance</span><br><span class="line">2022-12-19T10:02:58.492 runner[86dbcaaa] hkg [info] Configuring virtual machine</span><br><span class="line">2022-12-19T10:02:58.494 runner[86dbcaaa] hkg [info] Pulling container image</span><br><span class="line">2022-12-19T10:02:59.436 runner[86dbcaaa] hkg [info] Unpacking image</span><br><span class="line">2022-12-19T10:02:59.450 runner[86dbcaaa] hkg [info] Preparing kernel init</span><br><span class="line">2022-12-19T10:02:59.946 runner[86dbcaaa] hkg [info] Configuring firecracker</span><br><span class="line">2022-12-19T10:03:00.411 runner[86dbcaaa] hkg [info] Starting virtual machine</span><br><span class="line">2022-12-19T10:03:00.671 app[86dbcaaa] hkg [info] Starting init (commit: f447594)...</span><br><span class="line">2022-12-19T10:03:00.700 app[86dbcaaa] hkg [info] Preparing to run: `/cnb/process/biliroaming-go-server` as 1000</span><br><span class="line">2022-12-19T10:03:00.723 app[86dbcaaa] hkg [info] 2022/12/19 10:03:00 listening on [fdaa:0:6690:a7b:7f07:86db:caaa:2]:22 (DNS: [fdaa::3]:53)</span><br><span class="line">2022-12-19T10:03:00.816 app[86dbcaaa] hkg [info] 2022/12/19 10:03:00 stat ./config.yml: no such file or directory</span><br><span class="line">2022-12-19T10:03:01.705 app[86dbcaaa] hkg [info] Starting clean up.</span><br></pre></td></tr></table></figure><p>接着我们把<code>Dockerfile</code>删掉，因为如果有这个文件的话，<code>flyctl</code>会把这个判定为docker项目，这样的话我们就很难把配置文件丢进去，所以我们要更改它的判定，将判定改为<code>go</code>项目，所以要删掉这个</p><p>然后运行以下命令来初始化，跟着它的提示进行就行，只是最后问我们要不要部署，我们先选择不部署，因为我们接下来要导入数据库（记得把弹出来的数据库连接信息记住，因为它只会展示一次，然后就找不到啦）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets/img/Deploy-biliroaming-go-server-with-flyio/Code_j3ENjuAEAf.png">接着我们修改一下项目的端口，将<code>config.example.yml</code>复制一份，为<code>config.yml</code>找到<code>port</code>，把后面的数字改为<code>8080</code></p><p>接着我们打开<code>config.yml</code>修改数据库配置，找到以下内容，注释掉<code>passwordFile</code>，然后修改配置为我们前面创建数据库时给的内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库</span></span><br><span class="line"><span class="attr">postgreSQL:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&quot;&lt;app_name&gt;-db.internal&quot;</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">&quot;postgres&quot;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&#x27;password&#x27;</span></span><br><span class="line">  <span class="comment">#passwordFile: &quot;/run/secrets/db-password&quot;</span></span><br><span class="line">  <span class="attr">dbName:</span> <span class="string">&quot;&lt;db&gt;&quot;</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5432</span></span><br></pre></td></tr></table></figure><h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><p>fly.io的创建的数据库进行连接的时候是使用内部域名进行连接的（格式大概是<code>&lt;app_name&gt;-db.internal</code>，所以我们不能够通过正常的方式进行连接。所幸，<code>flyctl</code>里面可以把数据库给映射到本地</p><p>使用以下命令进行映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flyctl proxy 5432 -a &lt;db_name&gt;</span></span><br></pre></td></tr></table></figure><p>这里我就使用下面这个命令进行连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flyctl proxy 5432:5432 -a biliroaming-tutorial-db</span></span><br></pre></td></tr></table></figure><p>显示如下内容的时候就是可以进行连接了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxying local port 5432 to remote [biliroaming-tutorial-db.internal]:5432</span><br></pre></td></tr></table></figure><p>codespaces还可以在<code>PORTS</code>选项卡里看到绑定的本地端口</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets/img/Deploy-biliroaming-go-server-with-flyio/Code_cKM3RAPklr.png"></p><p>这里使用navicat进行连接，在测试之前一定要确保信息填对了</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets/img/Deploy-biliroaming-go-server-with-flyio/navicat_pBpgBHRGhZ.png"></p><p>连接以后，我们在左侧可以看到两个数据库，一个是<code>postgres</code>，一个是<code>&lt;app_name&gt;</code>用哪个随便，不过如果要用<code>&lt;app_name&gt;</code>那个，就需要在配置文件里面相应地改掉（一会讲）</p><p>右键自己需要使用的数据库，选择<code>Execute SQL File</code>（执行SQL脚本，我这里是英文版），然后逐个将项目的sql文件夹内的脚本执行，构建数据库结构</p><h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><p>使用以下命令来部署项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flyctl deploy</span></span><br></pre></td></tr></table></figure><p>如果在部署过程中遇到了下面这个问题（用codespaces就出现了，不过这个好像是它服务器的部署器的问题而不是我codespaces的问题）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error failed to fetch an image or build from source: downloading buildpack: extracting from registry gcr.io/paketo-buildpacks/go: fetching image: error pulling image configuration: error parsing HTTP 403 response body: invalid character &#x27;&lt;&#x27; looking for beginning of value: &quot;&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;?&gt;&lt;Error&gt;&lt;Code&gt;AccessDenied&lt;/Code&gt;&lt;Message&gt;Access denied.&lt;/Message&gt;&lt;Details&gt;We&#x27;re sorry, but this service is not available in your location&lt;/Details&gt;&lt;/Error&gt;&quot;</span><br></pre></td></tr></table></figure><p>那就要加多个<code>--local-only</code>参数，变成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flyctl deploy --local-only</span></span><br></pre></td></tr></table></figure><p>当你的fly.io项目的<code>monitor</code>里面显示如下就是部署成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2022-12-19T10:35:04.789 runner[fa79ac75] hkg [info] Starting instance</span><br><span class="line">2022-12-19T10:35:07.119 runner[fa79ac75] hkg [info] Configuring virtual machine</span><br><span class="line">2022-12-19T10:35:07.121 runner[fa79ac75] hkg [info] Pulling container image</span><br><span class="line">2022-12-19T10:35:14.098 runner[fa79ac75] hkg [info] Unpacking image</span><br><span class="line">2022-12-19T10:35:15.511 runner[fa79ac75] hkg [info] Preparing kernel init</span><br><span class="line">2022-12-19T10:35:15.926 runner[fa79ac75] hkg [info] Configuring firecracker</span><br><span class="line">2022-12-19T10:35:16.157 runner[fa79ac75] hkg [info] Starting virtual machine</span><br><span class="line">2022-12-19T10:35:16.547 app[fa79ac75] hkg [info] Starting init (commit: f447594)...</span><br><span class="line">2022-12-19T10:35:16.591 app[fa79ac75] hkg [info] Preparing to run: `/cnb/process/biliroaming-go-server` as 1000</span><br><span class="line">......</span><br><span class="line">2022-12-19T10:35:17.834 app[fa79ac75] hkg [info] DELETE FROM &quot;th_subtitle_caches&quot; WHERE (&quot;th_subtitle_caches&quot;.&quot;updated_at&quot; &lt;= $1);</span><br><span class="line">2022-12-19T10:35:17.834 app[fa79ac75] hkg [info] [2022-12-19 10:20:17.834077308 +0000 UTC]</span><br><span class="line">2022-12-19T10:35:17.835 app[fa79ac75] hkg [info] 2022-12-19T10:35:17.835Z DEBUG biliroaming-go-server/main.go:124 Cleanup 0 TH subtitle cache</span><br></pre></td></tr></table></figure><h3 id="获取ipv4地址"><a href="#获取ipv4地址" class="headerlink" title="获取ipv4地址"></a>获取ipv4地址</h3><p>因为fly.io默认只分配了ipv6地址，然而ipv6还没有普及，我们还是需要ipv4的</p><p>使用以下命令来为项目获取ipv4地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flyctl ips allocate-v4 -a &lt;app_name&gt;</span></span><br></pre></td></tr></table></figure><p>会显示获取到的IP地址等信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VERSION IP              TYPE    REGION  CREATED AT </span><br><span class="line">v4      149.248.221.246 public  global  7s ago    </span><br></pre></td></tr></table></figure><h3 id="已知的bug"><a href="#已知的bug" class="headerlink" title="已知的bug"></a>已知的bug</h3><h4 id="显示“账号未登录”"><a href="#显示“账号未登录”" class="headerlink" title="显示“账号未登录”"></a>显示“账号未登录”</h4><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets/img/Deploy-biliroaming-go-server-with-flyio/QQ%E5%9B%BE%E7%89%8720221219181007.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Tech" scheme="https://bili33.top/categories/Tech/"/>
    
    
    <category term="Tech" scheme="https://bili33.top/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>就决定是你啦！苏菲婆5！ —— 谈谈我对Surface Pro 5的使用体验以及各种骚操作</title>
    <link href="https://bili33.top/posts/Enchance-my-Surface-Pro-5/"/>
    <id>https://bili33.top/posts/Enchance-my-Surface-Pro-5/</id>
    <published>2022-11-24T08:39:18.000Z</published>
    <updated>2022-12-03T03:05:32.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今年的九月份，我卖掉了我的老联想 Yoga 370，然后购置了一台Surface Pro 5顶配版给我自己用</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/2fb3646c58c445c79e0439dd5eb0670.jpg"></p><p>起初是想当做笔记本用的（因为可以用笔），后来才发现有很多的用途</p><p>本文旨在记录我在Surface Pro 5上面的各种骚操作，以及我的个人使用体验，告诉你为什么在<code>2202</code>年，我还要选择一台仅仅配置是7代i7的微软亲儿子Surface Pro 5</p><p>先上两张实物图（背膜是拿图片找某宝做的）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/18325c20e17b5cb63ea4c9c56ebd9f0.jpg"></p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/379d60dc4b2e0e6e78fe593ec38a69d.jpg"></p><hr><h2 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h2><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/SP5-Buying.png"></p><p>很简单，鱼子上面一搜，就有很多，我找的是个人使用的那种（其实鱼子上面很轻易能看出谁是二道贩子，谁是个人卖家），卖家跟我说电池有点问题，其他没啥问题。我想都17年还是18年的产品了，电池有点问题也是正常的事情，然后就一拍即合，拍下了这台苏菲Pro 5</p><p>等我拿到手以后，我发现事情没有那么简单，确实是电池有问题，但是这个电量显示完全不准，有可能我还在办公，电池剩下50%左右的电量就直接给我关机了，等我怎么按下开机键也没用，接上电源后才发现是没电了。</p><p>于是我在某宝上一搜，果然有换电池的，价格在280~450不等，我想这个价格也算是合理，毕竟苏菲这东西集成度太高了，拆的也难。于是我找了一家标价是280的，然后把机子寄了过去换电池。</p><p>某天晚上自习课刚下课，突然我的OPPO Watch接到一通电话，一听才知道是某宝维修商，他说我的电脑不仅是电池有问题，主板还漏电，对钱比较敏感的我问了一句修这个花多少钱，总之最后价格讲下来就是460</p><p>拿到修好的苏菲，我就开始了我的捣鼓之旅。</p><h2 id="Windows（Windows11）体验"><a href="#Windows（Windows11）体验" class="headerlink" title="Windows（Windows11）体验"></a>Windows（Windows11）体验</h2><p>既然是微软亲儿子，那Windows的体验是少不了的，我这台装的是Windows 11 Professional（专业版）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/f542d3b70fce1c4d34cd12f92f319cc.jpg"></p><p>既然Surface是一个笔记本（真笔记本，不是电脑层面的笔记本），那肯定得走一波手写笔的体验</p><p>我用了巨硬自带的OneNote for Windows 10（没错Win11还用的是Win10的），这个东西在我弄数学建模竞赛的时候发挥了非常大的作用</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/onenote.png"></p><p>而且Onenote有个好处，如果你在其他机器上登陆同一个Onenote账户，可以直接同步（下面这个是我游戏本上的截图）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/ApplicationFrameHost-20221203-102324.png"></p><p>当然，因为Surface独有的触屏体验，还可以玩Osu（虽然以前那台LENOVO也可以点着玩）【忘截屏了】</p><p>还可以拿来推GALGAME（没下完，就截个Steam意思意思吧），但是拿来打CSGO那就是小霸王了（一帧能玩，两帧流畅，三帧电竞）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/3087f169d2307bf4e84234493cce8a5.jpg"></p><p>这个3:2的屏幕，写代码也是杠杠的（图为弄数模的时候的数据处理）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/c480e84bb4db912e899db93c1c31a73.png"></p><p>还可以顺带玩一玩SDVX（民间版本，不外传，因为禁用了键盘所以是拍的）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/SDVX.jpg"></p><p>再加上Win11对触屏本身的BUFF加持，让苏菲变得比某希沃好用多了</p><h2 id="Linux（Ubuntu）体验【略】"><a href="#Linux（Ubuntu）体验【略】" class="headerlink" title="Linux（Ubuntu）体验【略】"></a>Linux（Ubuntu）体验【略】</h2><blockquote><p>因为我用Ubuntu的时候没截屏过，然后输入法配置问题把我搞得心态崩了直接把Ubuntu删了，所以这一届没有图片</p></blockquote><p>总的来说是还可以，但是要经过一番配置才可以，你需要安装一个Kernel才能解锁Surface的全部功能（包括触屏等）</p><p>使用的项目是这个<a href="https://github.com/linux-surface/linux-surface">https://github.com/linux-surface/linux-surface</a></p><p>安装方法见<a href="https://github.com/linux-surface/linux-surface/wiki/Installation-and-Setup#debian--ubuntu">Installation and Setup · linux-surface&#x2F;linux-surface Wiki (github.com)</a></p><h2 id="FydeOS（ChromeOS衍生版）体验"><a href="#FydeOS（ChromeOS衍生版）体验" class="headerlink" title="FydeOS（ChromeOS衍生版）体验"></a>FydeOS（ChromeOS衍生版）体验</h2><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/46f340eb313ca2fcac7f1bbfc79d631.jpg" alt="装了FydeOS的Surface Pro 5"></p><p>为啥我会选择装ChromeOS？这个要从一个想法说起。本来我就是个音游玩家，一直在用手机玩音游，没怎么用过平板来玩（以前嫖过别人的平板不过那也是别人的），平板玩音游的优势很大，主要还是屏幕大。我一开始选的是<a href="https://blissos.org/">Bliss OS For PC</a>，这个里面是个Android x86系统，但我不知道是苏菲特色还是咋地，不管是BlissOS 11、BlissOS 14 还是 BlissOS 15（如果过不了那个<code>logcat</code>可以F12里面直接找下载链接，这里放一个 -&gt; <a href="https://sourceforge.net/projects/blissos-dev/files/Android-Generic/PC/bliss/S/foss/alpha/Bliss-v15.0-Alpha-android_x86_64-OFFICIAL-foss-202112151838-nb-sd-ksu-gearlock-ex_vt-console_all-mesa-drivers-crocus.iso/download">BlissOS 15 with Gearlock</a>）装在我的Surface上就一直起不来（进不了系统，有的卡在grub，有的卡在kernel load，有的直接重启），所以我就只能另辟蹊径</p><p>我想起之前用过的FydeOS，但是用的是以前的那个联想装的，还很不成熟，只能在U盘里面使用，装东西也只能装在那个里面，所以当时就放弃了。时隔一年，我又再次下载下来发现已经跟之前很不一样了，现在可以安装在硬盘里面了（安装过程省略，才不是我没有截图呢），安装的时候如果你要保留Windows，记得让安装程序帮你配置rEFInd，要不然会很麻烦</p><p>开机后直接就是一张壁纸，下面是任务栏（启动器）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/ff5d83746ddc8027ef0036cc1b2b861.jpg"></p><p>从下往上滑，打开应用列表，有个非常显眼的东西：安卓设置，点开以后会有个EULA，同意了就可以打开安卓子系统了（其实是Arc - Android Runtime on ChromeOS）</p><p>打开Android子系统后，可以在关于里面看到是Android 9（原生的）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/04f0e3d13686f5416c86c8c8452c65f.jpg"></p><p>用我们的常规手段打开开发者选项后，就可以打开adb调试了，然后可以在ChromeOS的Linux开发者容器里面用adb连接</p><p>你还可以在FydeOS的应用商店里面找到<code>配置 OpenGapps</code>这个应用，打开它，我们就可以安装GAPPS套件了</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/81476986829b981b0c917e76117821f.jpg"></p><p>你可以预先下好Clash啥的软件，方便后续使用</p><p>关于VPN服务，真的要点个赞，当你在Android子系统中使用VPN服务时，FydeOS会自动将VPN应用于整个OS里面，也就是说当我打开Clash的时候，不仅仅是Android子系统的软件可以走代理，FydeOS的Chromium也上了代理，不用再在Linux容器里面装多个v2rayL啥的东西了</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/5b86e24ec0575dbc025142f0bab7156.jpg"></p><p>接着就是装一堆音游啦！既然有了Google Play商店，我就从Play商店里面下载（Cytus2本来在B站下的，因为给B站充钱了，但是在这上面会闪退而Play版就不会，辣鸡龙渊能不能让我转国际区……）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/854beefba9f44be923cdc9a45b51fa2.jpg"></p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/7844f17608ee430106f9a5881658c3b.jpg"></p><p>在这个上面玩音游的体验不能算是优秀，只能算是中规中矩，有些音游在上面玩的有点卡（例如阿卡伊，当然不排除我真的不会玩阿卡伊），华为玩音游有的现象在这上面基本都有（指吃音）</p><p>不过这个系统的Android和ChromeOS之间几乎没有隔阂，这个体现在分享上面，你可以直接分享到Android的应用中</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Enchance-my-Surface-Pro-5/share-on-fydeos.jpg"></p><p>我还在这上面装了崩崩崩、PCR（多聚酶链式反应）、FGO（非酋系列）、明日方舟这几个游戏，本来装了原的，但是原的体验并不好，跟在我的红米NOTE 11上面打感觉没什么两样，就删掉了</p><p>不过这个Android有一个缺点：不能root，我正在寻找root的方式不过这肯定要很久，或许我会找不到。本来我想试试在Windows下用DiskGenius把boot.img直接提取出来修补的，但是FydeOS的目录结构非常奇怪，我是真的没有找到，慢慢来吧……</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Surface Pro 5毕竟是一台几年前的本子了，论性能肯定比不上现在的电脑，但是它带给我的使用体验是非常棒的，比我之前那台YOGA要好得多（轻薄、便携），而且3:2的屏幕确实适合工作（这里表扬一下拯救者系列，我的戴尔游侠就是16:9），可能缺点就是在性能上，还有就是Linux的适配上面了。该说不愧是微软亲儿子嘛，微软做工确实牛</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Tech" scheme="https://bili33.top/categories/Tech/"/>
    
    
    <category term="Tech" scheme="https://bili33.top/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>移动你的WSA数据盘，让你的C盘不再爆满</title>
    <link href="https://bili33.top/posts/Move-your-wsa-data/"/>
    <id>https://bili33.top/posts/Move-your-wsa-data/</id>
    <published>2022-11-24T05:09:57.000Z</published>
    <updated>2022-11-24T05:17:59.430Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>WSA确实是个很好用的东西，毕竟能够直接跑上安卓系统，不用忍受模拟器那种广告，很方便</p><p>但是同样也带来了一些问题就是：你的C盘会爆满</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Move-your-wsa-data/explorer-20220830-181707.png"></p><p>这主要是因为WSA的数据盘都放在了<code>C:\Users\%username%\AppData\Local\Packages\MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe\LocalCache\</code>这个目录下，我的数据盘经过我的半年使用已经到了<code>34.3GB</code>了，然后就导致了我的C盘像上面那张图那样要炸了</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Move-your-wsa-data/explorer-20221124-131312.png"></p><p>我记得Linux里面有<code>ln</code>命令可以创建文件链接，然后Windows有个叫做<code>mklink</code>的（仅cmd可用，powershell没有，我踩了这个坑），之前为了让Epic和Steam的GTA5都可用还用过来着，这不用这个方法把数据移到其他硬盘里</p><p>我把文件放在了<code>D:\WSA-data</code>这个文件夹里，连着<code>C:\Users\%username%\AppData\Local\Packages\MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe\LocalCache\</code>的<code>LocalCache</code>文件夹整个放进去</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Move-your-wsa-data/explorer-20221124-131546.png"></p><p>然后按<kbd>Windows</kbd> + <kbd>X</kbd>，选择<code>Windows 终端（管理员）</code>（选择<code>powershell</code>或者<code>cmd</code>都行，但是一定要有管理员权限</p><p>然后打入下面这行命令（记得把后面的那个路径改成你自己的）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /J <span class="string">&quot;C:\Users\GamerNoTitle\AppData\Local\Packages\MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe\LocalCache&quot;</span> <span class="string">&quot;D:\WSA-data\LocalCache&quot;</span></span><br></pre></td></tr></table></figure><p>然后我们的文件链接就创建成功了，打开WSA，一切正常！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Software" scheme="https://bili33.top/categories/Software/"/>
    
    
    <category term="Software" scheme="https://bili33.top/tags/Software/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的Python ACM Ch.9：动态规划</title>
    <link href="https://bili33.top/posts/Go-for-Python-Ch9/"/>
    <id>https://bili33.top/posts/Go-for-Python-Ch9/</id>
    <published>2022-11-15T11:48:27.000Z</published>
    <updated>2022-11-19T00:06:22.480Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="例题：跳台阶"><a href="#例题：跳台阶" class="headerlink" title="例题：跳台阶"></a>例题：跳台阶</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><ul><li>示例 1</li></ul><p>输入：n &#x3D; 2 输出：2 </p><p>解释：有两种方法可以爬到楼顶。 </p><ol><li><p>1 阶 + 1 阶 </p></li><li><p>2 阶</p></li></ol><ul><li>示例 2：</li></ul><p>输入：n &#x3D; 3 输出：3 </p><p>解释：有三种方法可以爬到楼顶。 </p><ol><li><p>1 阶 + 1 阶 + 1 阶 </p></li><li><p>1 阶 + 2 阶 </p></li><li><p>2 阶 + 1 阶</p></li></ol><p>1 &lt;&#x3D; n &lt;&#x3D; 45</p><h3 id="题解（递归法）"><a href="#题解（递归法）" class="headerlink" title="题解（递归法）"></a>题解（递归法）</h3><p>解释：一个<code>steps</code>为<code>n</code>的问题可以看做是<code>steps</code>为<code>n-1</code>和<code>steps</code>为<code>n-2</code>的步骤和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">steps = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Steps: &#x27;</span>))   <span class="comment"># 台阶数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">degrade</span>(<span class="params">steps</span>):</span><br><span class="line">    <span class="keyword">if</span> steps == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> steps == <span class="number">2</span>: <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> degrade(steps - <span class="number">1</span>) + degrade(steps - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(degrade(steps))</span><br></pre></td></tr></table></figure><p>这个方法可以发现，当输入<code>steps</code>为<code>10</code>时，<code>degrade(9)</code>计算了<code>1</code>次，<code>degrade(8)</code>计算了<code>2</code>次（<code>degrade(9)</code>里面一次，自身一次），再往下发现越往下计算的次数越多，如果计算式子很复杂会消耗更多的时间</p><p>所以有一个优化的方式，就是把已经算过的值丢到一个新的变量里面存起来，如果计算过就不用计算了（缓存优化）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">steps = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Steps: &#x27;</span>))   <span class="comment"># 台阶数</span></span><br><span class="line">memory = [-<span class="number">1</span>] * <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">degrade</span>(<span class="params">steps</span>):</span><br><span class="line">    <span class="keyword">if</span> steps == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> steps == <span class="number">2</span>: <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> memory[steps] &gt;= <span class="number">0</span>: <span class="keyword">return</span> memory[steps]</span><br><span class="line">    memory[steps] = degrade(steps - <span class="number">1</span>) + degrade(steps - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> memory[steps]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(degrade(steps))</span><br></pre></td></tr></table></figure><p>或者使用字典来存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">steps = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Steps: &#x27;</span>))   <span class="comment"># 台阶数</span></span><br><span class="line">memory = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">degrade</span>(<span class="params">steps</span>):</span><br><span class="line">    <span class="keyword">if</span> steps == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> steps == <span class="number">2</span>: <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> steps <span class="keyword">in</span> memory: <span class="keyword">return</span> memory[steps]</span><br><span class="line">    memory[steps] = degrade(steps - <span class="number">1</span>) + degrade(steps - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> memory[steps]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(degrade(steps))</span><br></pre></td></tr></table></figure><h2 id="递归问题"><a href="#递归问题" class="headerlink" title="递归问题"></a>递归问题</h2><p>步骤只有两步：</p><ul><li>分解（分解为规模较小的相似问题）</li><li>原子问题（可以由问题分解推出，这里就是<code>i=1</code>和<code>i=2</code>的情况）</li></ul><p>很多DP算法都能够用递归解决，因为这个比DP简单，所以先在这里列出来。</p><p><strong>递归会占用系统资源，而且递归一定会比循环更慢一些（尽管你用了缓存优化）</strong>，当递归数过高时会超过Python的最大深度，引起<code>RecursionError</code>然后就……像下面这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Steps: 10000</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\.vscode\extensions\ms-python.python-2022.18.2\pythonFiles\lib\python\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_trace_dispatch_regular.py&quot;, line 359, in __call__</span><br><span class="line">    is_stepping = pydev_step_cmd != -1</span><br><span class="line">RecursionError: maximum recursion depth exceeded in comparison</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;C:\Users\GamerNoTitle\AppData\Local\Programs\Python\Python310\lib\runpy.py&quot;, line 196, in _run_module_as_main</span><br><span class="line">    return _run_code(code, main_globals, None,</span><br><span class="line">  File &quot;C:\Users\GamerNoTitle\AppData\Local\Programs\Python\Python310\lib\runpy.py&quot;, line 86, in _run_code</span><br><span class="line">    exec(code, run_globals)</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\.vscode\extensions\ms-python.python-2022.18.2\pythonFiles\lib\python\debugpy\__main__.py&quot;, line 39, in &lt;module&gt;</span><br><span class="line">    cli.main()</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\.vscode\extensions\ms-python.python-2022.18.2\pythonFiles\lib\python\debugpy/..\debugpy\server\cli.py&quot;, line 430, in main</span><br><span class="line">    run()</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\.vscode\extensions\ms-python.python-2022.18.2\pythonFiles\lib\python\debugpy/..\debugpy\server\cli.py&quot;, line 284, in run_file</span><br><span class="line">    runpy.run_path(target, run_name=&quot;__main__&quot;)</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\.vscode\extensions\ms-python.python-2022.18.2\pythonFiles\lib\python\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_runpy.py&quot;, line 321, in run_path</span><br><span class="line">    return _run_module_code(code, init_globals, run_name,</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\.vscode\extensions\ms-python.python-2022.18.2\pythonFiles\lib\python\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_runpy.py&quot;, line 135, in _run_module_code</span><br><span class="line">    _run_code(code, mod_globals, init_globals,</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\.vscode\extensions\ms-python.python-2022.18.2\pythonFiles\lib\python\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_runpy.py&quot;, line 124, in _run_code</span><br><span class="line">    exec(code, run_globals)</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\Desktop\Untitled.py&quot;, line 11, in &lt;module&gt;</span><br><span class="line">    print(degrade(steps))</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\Desktop\Untitled.py&quot;, line 8, in degrade</span><br><span class="line">    memory[steps] = degrade(steps - 1) + degrade(steps - 2)</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\Desktop\Untitled.py&quot;, line 8, in degrade</span><br><span class="line">    memory[steps] = degrade(steps - 1) + degrade(steps - 2)</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\Desktop\Untitled.py&quot;, line 8, in degrade</span><br><span class="line">    memory[steps] = degrade(steps - 1) + degrade(steps - 2)</span><br><span class="line">  [Previous line repeated 983 more times]</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\Desktop\Untitled.py&quot;, line 4, in degrade</span><br><span class="line">    def degrade(steps):</span><br><span class="line">  File &quot;c:\Users\GamerNoTitle\.vscode\extensions\ms-python.python-2022.18.2\pythonFiles\lib\python\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_trace_dispatch_regular.py&quot;, line 469, in __call__</span><br><span class="line">    return None if event == &#x27;call&#x27; else NO_FTRACE</span><br><span class="line">RecursionError: maximum recursion depth exceeded in comparison</span><br></pre></td></tr></table></figure><h2 id="DP算法"><a href="#DP算法" class="headerlink" title="DP算法"></a>DP算法</h2><h3 id="核心问题"><a href="#核心问题" class="headerlink" title="核心问题"></a>核心问题</h3><ul><li>合成问题</li><li>初始状态（就是<code>i=1</code>和<code>i=2</code>的状态）</li><li>计算后续状态</li></ul><h2 id="DP算法求解"><a href="#DP算法求解" class="headerlink" title="DP算法求解"></a>DP算法求解</h2><p>还是上面那个跳台阶问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">steps = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Steps: &#x27;</span>))   <span class="comment"># 台阶数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">degrade</span>(<span class="params">steps</span>):</span><br><span class="line">    result = [<span class="number">0</span>] * (steps + <span class="number">1</span>)</span><br><span class="line">    result[<span class="number">1</span>], result[<span class="number">2</span>] = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, steps+<span class="number">1</span>):</span><br><span class="line">        result[i] = result[i-<span class="number">1</span>] + result[i-<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> result[steps]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(degrade(steps))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Steps: 10000</span><br><span class="line">54438373113565281338734260993750380135389184554695967026247715841208582865622349017083051547938960541173822675978026317384359584751116241439174702642959169925586334117906063048089793531476108466259072759367899150677960088306597966641965824937721800381441158841042480997984696487375337180028163763317781927941101369262750979509800713596718023814710669912644214775254478587674568963808002962265133111359929762726679441400101575800043510777465935805362502461707918059226414679005690752321895868142367849593880756423483754386342639635970733756260098962462668746112041739819404875062443709868654315626847186195620146126642232711815040367018825205314845875817193533529827837800351902529239517836689467661917953884712441028463935449484614450778762529520961887597272889220768537396475869543159172434537193611263743926337313005896167248051737986306368115003088396749587102619524631352447499505204198305187168321623283859794627245919771454628218399695789223798912199431775469705216131081096559950638297261253848242007897109054754028438149611930465061866170122983288964352733750792786069444761853525144421077928045979904561298129423809156055033032338919609162236698759922782923191896688017718575555520994653320128446502371153715141749290913104897203455577507196645425232862022019506091483585223882711016708433051169942115775151255510251655931888164048344129557038825477521111577395780115868397072602565614824956460538700280331311861485399805397031555727529693399586079850381581446276433858828529535803424850845426446471681531001533180479567436396815653326152509571127480411928196022148849148284389124178520174507305538928717857923509417743383331506898239354421988805429332440371194867215543576548565499134519271098919802665184564927827827212957649240235507595558205647569365394873317659000206373126570643509709482649710038733517477713403319028105575667931789470024118803094604034362953471997461392274791549730356412633074230824051999996101549784667340458326852960388301120765629245998136251652347093963049734046445106365304163630823669242257761468288461791843224793434406079917883360676846711185597501</span><br></pre></td></tr></table></figure><h2 id="DP与递归的区别"><a href="#DP与递归的区别" class="headerlink" title="DP与递归的区别"></a>DP与递归的区别</h2><p>DP是正着算，递归是反着算，仅此而已，思考问题的思路不同。</p><h2 id="例题：网络路径数"><a href="#例题：网络路径数" class="headerlink" title="例题：网络路径数"></a>例题：网络路径数</h2><p>一个机器人位于一个 m x n 网格的左上角 。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角。</p><p>问总共有多少条不同的路径？</p><ul><li>示例 1</li></ul><p>输入：m &#x3D; 3, n &#x3D; 7 输出：28</p><ul><li>示例 2</li></ul><p>输入：m &#x3D;3, n &#x3D; 2 输出：3 解释：从左上角开始，总共有 3 条路径可以到达右下角。 </p><ol><li><p>向右 -&gt; 向下 -&gt; 向下 </p></li><li><p>向下 -&gt; 向下 -&gt; 向右 </p></li><li><p>向下 -&gt; 向右 -&gt; 向下</p></li></ol><ul><li>示例 3</li></ul><p>输入：m &#x3D;7, n &#x3D; 3 </p><p>输出：28 </p><ul><li>示例 4</li></ul><p>输入：m &#x3D; 3, n &#x3D; 3 </p><p>输出：6</p><h3 id="题解（递归法）-1"><a href="#题解（递归法）-1" class="headerlink" title="题解（递归法）"></a>题解（递归法）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pathcount</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pathcount(m-<span class="number">1</span>, n) + pathcount(m, n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="题解（DP法）"><a href="#题解（DP法）" class="headerlink" title="题解（DP法）"></a>题解（DP法）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pathcount</span>(<span class="params">m, n</span>):</span><br><span class="line">    ls = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> __ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>)]</span><br><span class="line">    ls[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(ls[<span class="number">1</span>])):<span class="comment"># 初始化状态初值</span></span><br><span class="line">        ls[<span class="number">1</span>][i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(ls)):</span><br><span class="line">        ls[i][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    ls[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">    ls[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, m+<span class="number">1</span>): <span class="comment"># b是行</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>): <span class="comment"># a是列</span></span><br><span class="line">            ls[b][a] = ls[b-<span class="number">1</span>][a] + ls[b][a-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(ls)</span><br><span class="line">    <span class="keyword">return</span> ls[m][n]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Coding" scheme="https://bili33.top/categories/Coding/"/>
    
    
    <category term="Coding" scheme="https://bili33.top/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的Python ACM Ch.8：综合题目</title>
    <link href="https://bili33.top/posts/Go-for-Python-Ch8/"/>
    <id>https://bili33.top/posts/Go-for-Python-Ch8/</id>
    <published>2022-11-12T00:19:26.000Z</published>
    <updated>2022-11-12T02:01:57.110Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h2><p>一个公司对于一个四位数的整型数字的加密方式为：每位数位上的数字+5后除以十得到余数，将各数位上的余数按照第一位与第四位、第二位与第三位的顺序进行交换，得到最终结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="built_in">input</span>(<span class="string">&#x27;num: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">message = [message[<span class="number">0</span>], message[<span class="number">1</span>], message[<span class="number">2</span>], message[<span class="number">3</span>]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message)):</span><br><span class="line">    message[i] = <span class="built_in">int</span>(message[i]) + <span class="number">5</span> % <span class="number">10</span></span><br><span class="line">message[<span class="number">0</span>], message[<span class="number">1</span>], message[<span class="number">2</span>], message[<span class="number">3</span>] = message[<span class="number">3</span>], message[<span class="number">2</span>], message[<span class="number">1</span>], message[<span class="number">0</span>]</span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> message:</span><br><span class="line">    result += <span class="built_in">str</span>(i)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="双色球"><a href="#双色球" class="headerlink" title="双色球"></a>双色球</h2><p>用程序模拟双色球开奖过程，红色球范围为1<del>33，蓝色球范围为1</del>16，红色球有6个且数字不能重复，蓝色球只有1个。</p><p>输出格式为：红色球：x x x x x x 蓝色球：x</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">reds = <span class="built_in">set</span>()</span><br><span class="line">blue = -<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(reds) &lt; <span class="number">6</span>:</span><br><span class="line">    reds.add(random.randint(<span class="number">1</span>,<span class="number">33</span>))</span><br><span class="line"></span><br><span class="line">blue = random.randint(<span class="number">1</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;红色球：&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reds:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;蓝色球：<span class="subst">&#123;blue&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Coding" scheme="https://bili33.top/categories/Coding/"/>
    
    
    <category term="Coding" scheme="https://bili33.top/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的Python ACM Ch.7：整数练习</title>
    <link href="https://bili33.top/posts/Go-for-Python-Ch7/"/>
    <id>https://bili33.top/posts/Go-for-Python-Ch7/</id>
    <published>2022-11-08T03:51:46.000Z</published>
    <updated>2022-11-08T13:03:19.878Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="黑洞数"><a href="#黑洞数" class="headerlink" title="黑洞数"></a>黑洞数</h2><ul><li>黑洞数又称陷阱数，是类具有奇特转换特性的整数。任何一个数字不全相同整数，经有限“重排求差”操作，总会得某一个或一些数，这些数即为黑洞数。“重排求差”操作即把组成该数的数字重排后得到的最大数减去重排后得到的最小数。或者是冰雹原理中的“1”黑洞数</li><li>求出三位数以内的黑洞数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">blackhole_num = <span class="built_in">set</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sort</span>(<span class="params">num</span>):</span><br><span class="line">    num_ascend_ls = <span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">str</span>(num)))</span><br><span class="line">    num_ascend = <span class="built_in">int</span>(num_ascend_ls[<span class="number">0</span>]+num_ascend_ls[<span class="number">1</span>]+num_ascend_ls[<span class="number">2</span>])</span><br><span class="line">    num_decend_ls = <span class="built_in">list</span>(<span class="built_in">reversed</span>(<span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">str</span>(num)))))</span><br><span class="line">    num_decend = <span class="built_in">int</span>(num_decend_ls[<span class="number">0</span>]+num_decend_ls[<span class="number">1</span>]+num_decend_ls[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">return</span> num_ascend, num_decend</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">    num = i</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num_ascend, num_decend = sort(num)</span><br><span class="line">        tmp = num_decend - num_ascend</span><br><span class="line">        <span class="keyword">if</span> tmp == num:</span><br><span class="line">            blackhole_num.add(tmp)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> tmp &lt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = tmp</span><br><span class="line"><span class="built_in">print</span>(blackhole_num)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;495&#125;</span><br></pre></td></tr></table></figure><p>我还去<a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E%E6%95%B0/761618">百度了一下</a>，三位数的黑洞数确实只有495……</p><h2 id="勾股数"><a href="#勾股数" class="headerlink" title="勾股数"></a>勾股数</h2><ul><li>这个应该不用多介绍了吧……输出100以内的所有勾股数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴力做法</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line">nums = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, a+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(sqrt(a ** <span class="number">2</span> + b ** <span class="number">2</span>)).endswith(<span class="string">&#x27;.0&#x27;</span>) <span class="keyword">and</span> sqrt(a ** <span class="number">2</span> + b ** <span class="number">2</span>) &lt;= <span class="number">100</span>:</span><br><span class="line">            nums.append((b, a, <span class="built_in">int</span>(sqrt(a**<span class="number">2</span>+b**<span class="number">2</span>))))</span><br><span class="line">nums.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出（共52个）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(3, 4, 5), (5, 12, 13), (6, 8, 10), (7, 24, 25), (8, 15, 17), (9, 12, 15), (9, 40, 41), (10, 24, 26), (11, 60, 61), (12, 16, 20), (12, 35, 37), (13, 84, 85), (14, 48, 50), (15, 20, 25), (15, 36, 39), (16, 30, 34), (16, 63, 65), (18, 24, 30), (18, 80, 82), (20, 21, 29), (20, 48, 52), (21, 28, 35), (21, 72, 75), (24, 32, 40), (24, 45, 51), (24, 70, 74), (25, 60, 65), (27, 36, 45), (28, 45, 53), (28, 96, 100), (30, 40, 50), (30, 72, 78), (32, 60, 68), (33, 44, 55), (33, 56, 65), (35, 84, 91), (36, 48, 60), (36, 77, 85), (39, 52, 65), (39, 80, 89), (40, 42, 58), (40, 75, 85), (42, 56, 70), (45, 60, 75), (48, 55, 73), (48, 64, 80), (51, 68, 85), (54, 72, 90), (57, 76, 95), (60, 63, 87), (60, 80, 100), (65, 72, 97)]</span><br></pre></td></tr></table></figure><h2 id="不重复的三位数"><a href="#不重复的三位数" class="headerlink" title="不重复的三位数"></a>不重复的三位数</h2><ul><li>用1、2、3、4能组成多少个互不相同且无重复数字的三位数？都是多少？</li><li>（其实Python里面的<code>itertools</code>里面有个方法叫做<code>permutation()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line">possible = permutations(nums, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> a, b, c <span class="keyword">in</span> possible:</span><br><span class="line">    result.append(a*<span class="number">100</span>+b*<span class="number">10</span>+c)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(result))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[123, 124, 132, 134, 142, 143, 213, 214, 231, 234, 241, 243, 312, 314, 321, 324, 341, 342, 412, 413, 421, 423, 431, 432]</span><br><span class="line">24</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Coding" scheme="https://bili33.top/categories/Coding/"/>
    
    
    <category term="Coding" scheme="https://bili33.top/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的Python ACM Ch.6：质数与整数练习</title>
    <link href="https://bili33.top/posts/Go-for-Python-Ch6/"/>
    <id>https://bili33.top/posts/Go-for-Python-Ch6/</id>
    <published>2022-11-05T00:13:21.000Z</published>
    <updated>2022-11-05T03:21:28.901Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="孪生素数"><a href="#孪生素数" class="headerlink" title="孪生素数"></a>孪生素数</h2><ul><li>问题描述<br>本节要研究孪生素数的问题，先来看看什么是孪生素数。<br>所谓孪生素数指的是间隔为2的两个相邻素数，因为它们之间的距离己经近得不能再近了，如同孪生兄弟一样，故将这一对素数称为孪生素数。<br>显然，最小的一对孪生素数是（1，3）。我们可以写出3、100以内的孪生素数，一共有8对，分别是（3，5），（5，7），（11，13），（17，19），（29，31)，（41，43），<br>（59，61)和（71，73）。随着数字的增大，孪生素数的分布也越来越稀疏，人工寻找孪生素数变得非常困难。<br>关于孪生素数还存在着一个著名的猜想一孪生素数猜想，即孪生素数是否有无穷多对，这是数论中还有待解决的一个重要问题。此处我们只讨论在有限范围内的孪生素数求解问题。</li><li>本节要解决的问题：编程求出3、1000以内的所有孪生素数。</li></ul><p>其实很简单，直接遍历就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isPrime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">2</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    i = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= sqrt(num):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    primes = []</span><br><span class="line">    primesset = []</span><br><span class="line">    tmp = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="keyword">if</span> isPrime(i) <span class="keyword">and</span> <span class="keyword">not</span> flag:</span><br><span class="line">            primes.append(i)</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            tmp = i</span><br><span class="line">        <span class="keyword">elif</span> isPrime(i) <span class="keyword">and</span> flag:</span><br><span class="line">            primes.append(i)</span><br><span class="line">            primesset.append([tmp, i])</span><br><span class="line">            tmp = -<span class="number">1</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(primesset)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[1, 2], [3, 5], [7, 11], [13, 17], [19, 23], [29, 31], [37, 41], [43, 47], [53, 59], [61, 67], [71, 73], [79, 83], [89, 97], [101, 103], [107, 109], [113, 127], [131, 137], [139, 149], [151, 157], [163, 167], [173, 179], [181, 191], [193, 197], [199, 211], [223, 227], [229, 233], [239, 241], [251, 257], [263, 269], [271, 277], [281, 283], [293, 307], [311, 313], [317, 331], [337, 347], [349, 353], [359, 367], [373, 379], [383, 389], [397, 401], [409, 419], [421, 431], [433, 439], [443, 449], [457, 461], [463, 467], [479, 487], [491, 499], [503, 509], [521, 523], [541, 547], [557, 563], [569, 571], [577, 587], [593, 599], [601, 607], [613, 617], [619, 631], [641, 643], [647, 653], [659, 661], [673, 677], [683, 691], [701, 709], [719, 727], [733, 739], [743, 751], [757, 761], [769, 773], [787, 797], [809, 811], [821, 823], [827, 829], [839, 853], [857, 859], [863, 877], [881, 883], [887, 907], [911, 919], [929, 937], [941, 947], [953, 967], [971, 977], [983, 991]]</span><br></pre></td></tr></table></figure><h2 id="梅森素数"><a href="#梅森素数" class="headerlink" title="梅森素数"></a>梅森素数</h2><ul><li>问题描述：梅森数（MersennePrime）指的是形如2n·1的正整数，其中指数n是素数，记为Mno如果一个梅森数是素数，则称其为梅森素数。例如2^2-1&#x3D;3、2^3-1：7都是梅森素数。<br>当n：2、3、5、7时，Mn都是素数，但n&#x3D;11时，Mn&#x3D;2^11-1&#x3D;2047&#x3D;23×89，显然不是梅森素数。<br>1722年，瑞士数学大师欧拉证明了2^31-1&#x3D;21474837是一个素数，它共有10位数，成为当时世界上己知的最大素数。<br>迄今为止，人们仅发现了47个梅森素数。梅森素数历来都是数论研究中的一项重要内容，也是当今科学探索中的热点和难点问题。<br>了解了梅森素数后，现在来看本节要解决的编程问题。</li><li>试求出指数n&lt;20的所有梅森素数。</li></ul><p>直接去算n在20以内质数的时候2^n-1是否为质数就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isPrime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    i = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= sqrt(num):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    primes = []</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):  <span class="comment"># 20以内的素数</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(i):</span><br><span class="line">            primes.append(i)</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> isPrime(<span class="number">2</span>**num-<span class="number">1</span>):</span><br><span class="line">            result.append(<span class="number">2</span>**num-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(primes, result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 5, 7, 11, 13, 17, 19] [1, 3, 7, 31, 127, 8191, 131071, 524287]</span><br></pre></td></tr></table></figure><h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><ul><li>问题描述：打印不超过n（n&lt;256）的其平方具有对称性质的数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;n: &#x27;</span>))</span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(i**<span class="number">2</span>) == <span class="built_in">str</span>(i**<span class="number">2</span>)[::-<span class="number">1</span>]:</span><br><span class="line">        result.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 11, 22, 26, 101, 111, 121, 202, 212]</span><br></pre></td></tr></table></figure><h2 id="水仙花数"><a href="#水仙花数" class="headerlink" title="水仙花数"></a>水仙花数</h2><ul><li>问题描述：经典题目，三位数的数位上的数字的三次方等于数字本身</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    a = <span class="built_in">str</span>(i)[<span class="number">0</span>]</span><br><span class="line">    b = <span class="built_in">str</span>(i)[<span class="number">1</span>]</span><br><span class="line">    c = <span class="built_in">str</span>(i)[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(a)**<span class="number">3</span> + <span class="built_in">int</span>(b)**<span class="number">3</span> + <span class="built_in">int</span>(c)**<span class="number">3</span> == i:</span><br><span class="line">        result.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[153, 370, 371, 407]</span><br></pre></td></tr></table></figure><h2 id="阿姆斯特朗数"><a href="#阿姆斯特朗数" class="headerlink" title="阿姆斯特朗数"></a>阿姆斯特朗数</h2><ul><li>水仙花数的翻版，任意位数也可以有这个特性，求1000以内的这种数字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1001</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">if</span> i**<span class="number">3</span> == i:</span><br><span class="line">            result.append(i)</span><br><span class="line">    <span class="keyword">elif</span> i &gt;= <span class="number">10</span> <span class="keyword">and</span> i &lt; <span class="number">100</span>:</span><br><span class="line">        a = <span class="built_in">str</span>(i)[<span class="number">0</span>]</span><br><span class="line">        b = <span class="built_in">str</span>(i)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(a)**<span class="number">3</span> + <span class="built_in">int</span>(b)**<span class="number">3</span> == i:</span><br><span class="line">            result.append(i)</span><br><span class="line">    <span class="keyword">elif</span> i &gt;= <span class="number">100</span> <span class="keyword">and</span> i &lt; <span class="number">1000</span>:</span><br><span class="line">        a = <span class="built_in">str</span>(i)[<span class="number">0</span>]</span><br><span class="line">        b = <span class="built_in">str</span>(i)[<span class="number">1</span>]</span><br><span class="line">        c = <span class="built_in">str</span>(i)[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(a)**<span class="number">3</span> + <span class="built_in">int</span>(b)**<span class="number">3</span> + <span class="built_in">int</span>(c)**<span class="number">3</span> == i:</span><br><span class="line">            result.append(i)</span><br><span class="line">    <span class="keyword">elif</span> i &gt;= <span class="number">1000</span>:</span><br><span class="line">        a = <span class="built_in">str</span>(i)[<span class="number">0</span>]</span><br><span class="line">        b = <span class="built_in">str</span>(i)[<span class="number">1</span>]</span><br><span class="line">        c = <span class="built_in">str</span>(i)[<span class="number">2</span>]</span><br><span class="line">        d = <span class="built_in">str</span>(i)[<span class="number">3</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(a)**<span class="number">3</span> + <span class="built_in">int</span>(b)**<span class="number">3</span> + <span class="built_in">int</span>(c)**<span class="number">3</span> + <span class="built_in">int</span>(d)**<span class="number">3</span> == i:</span><br><span class="line">            result.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 153, 370, 371, 407]</span><br></pre></td></tr></table></figure><h2 id="完数"><a href="#完数" class="headerlink" title="完数"></a>完数</h2><ul><li>问题描述：一个数如果能由其因子相加得到，就称这个数字为完数。请输出1000以内的完数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    factor = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">int</span>(i/<span class="number">2</span>)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>: </span><br><span class="line">            factor.append(j)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span>(factor) == i: </span><br><span class="line">                result.append(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[6, 24, 28, 496]</span><br></pre></td></tr></table></figure><h2 id="自守数"><a href="#自守数" class="headerlink" title="自守数"></a>自守数</h2><ul><li>问题描述：一个数的平方的尾数等于自身的自然数即为自守数，求100 000以内的自守数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(i) == <span class="built_in">str</span>(i**<span class="number">2</span>)[-<span class="built_in">len</span>(<span class="built_in">str</span>(i)):]:</span><br><span class="line">        result.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 5, 6, 25, 76, 376, 625, 9376, 90625]</span><br></pre></td></tr></table></figure><h2 id="高位数的高次方位数输出"><a href="#高位数的高次方位数输出" class="headerlink" title="高位数的高次方位数输出"></a>高位数的高次方位数输出</h2><ul><li>题目描述：对于一个13位的高位数，进行13次方的运算后，输出最后三位数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">input</span>(<span class="string">&#x27;num: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line">tmpnum = <span class="built_in">int</span>(num[-<span class="number">3</span>:])</span><br><span class="line">last = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">    last = <span class="built_in">int</span>(<span class="built_in">str</span>(last)[-<span class="number">3</span>:]) * tmpnum</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(last)[-<span class="number">3</span>:])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入及输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num: 1234567891234</span><br><span class="line">504</span><br></pre></td></tr></table></figure><p>不截断尾巴的实际数字为<code>15477282471244379725868683797046205669901003401479261325193553207435375574886373743207123231086152401578649551681124388954385182017538129322035861770786709504</code></p><p>通过比较尾数发现做法是正确的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Coding" scheme="https://bili33.top/categories/Coding/"/>
    
    
    <category term="Coding" scheme="https://bili33.top/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的Python ACM Ch.5：练习系列</title>
    <link href="https://bili33.top/posts/Go-for-Python-Ch5/"/>
    <id>https://bili33.top/posts/Go-for-Python-Ch5/</id>
    <published>2022-11-01T11:33:57.000Z</published>
    <updated>2022-11-01T13:08:37.125Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="求素数"><a href="#求素数" class="headerlink" title="求素数"></a>求素数</h2><ul><li><p>问题描述<br>求给定范围start、end之间的所有素数。</p></li><li><p>问题分析<br>素数指的是只能被1和它自身整除的整数。判定一个整数m是否为素数的关键，就是要判定整数m能否能被除1和它自身以外的其他任何整数所整除，若都不能整除，则m为素数。本题求的是给定范围start、end之间的所有素数，考虑到程序的通用性，需要从键盘输入start和end的值，例如输入sta：1，end&#x3D;1000，则所编写的程序应能够打印出1、1000之间的所有素数。</p></li><li><p>求素数的方法参考：<a href="https://blog.csdn.net/sinat_26811377/article/details/96584293">判断一个数是否为质数（素数）的4种方法_是杰夫呀的博客-CSDN博客_如何判断一个数是不是质数</a></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line">start = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Start: &#x27;</span>))</span><br><span class="line">end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;End: &#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isPrime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">2</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    i = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= sqrt(num):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> isPrime(i):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="哥德巴赫猜想"><a href="#哥德巴赫猜想" class="headerlink" title="哥德巴赫猜想"></a>哥德巴赫猜想</h2><ul><li><p>问题描述<br>2000以内的不小于4的<strong>正偶数</strong>都能够分解为两个素数之和（即验证歌德巴赫猜想对2000以内的正偶数成立）。</p></li><li><p>问题分析<br>根据问题描述，为了验证歌德巴赫猜想对2000以内的正偶数都是成立的，要将整数分解为两部分，然后判断分解出的两个整数是否均为素数。若是，则满足题意，否则应重新进行分解和判断。针对该问题，我们可以给定如下的输入和输出限定。<br>输入时：每行输入一组数据，即2000以内的正偶数n，一直输入到文件结束符为止。<br>输出时：输出n能被分解成的素数a和b。如果不止一组解，则输出其中a最小的那组解。<br>当然，读者可以根据实际的需要规定不同的输入和输出形式。</p></li><li><p>这里指定输入方式：从控制台读入，空格分割</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line">nums = <span class="built_in">input</span>(<span class="string">&#x27;Nums(split with space): &#x27;</span>).split()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isPrime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">2</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    i = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= sqrt(num):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, nums))</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    add1 = -<span class="number">1</span></span><br><span class="line">    add2 = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, num):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isPrime(i): <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> isPrime(j): <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> i + j == num:</span><br><span class="line">                        add1 = i</span><br><span class="line">                        add2 = j</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> add1 != -<span class="number">1</span> <span class="keyword">and</span> add2 != -<span class="number">1</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(add1, add2)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>输入与输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Nums(split with space): 4 5 6 7 8 9 10</span><br><span class="line">2 2</span><br><span class="line">2 3</span><br><span class="line">3 3</span><br><span class="line">2 5</span><br><span class="line">3 5</span><br><span class="line">2 7</span><br><span class="line">3 7</span><br></pre></td></tr></table></figure><h2 id="1898"><a href="#1898" class="headerlink" title="1898"></a>1898</h2><ul><li><p>问题描述：“1898一要发就发”。请将不超过1993的所有素数从小到大排成第一行，第二行上的每个数都等于它上面相邻两个素数之差。编程求出：第二行数中是否存在若干个连续的整数，它们的和恰好为1898？假如存在的话，又有几种这样的情况？<br>两行数据分别如下：<br>第一行：2，3，5，7，11，13，17 …… 1979，1987，1993</p><p>第二行：1，2，2，4，2，4……8，6</p></li></ul><p>（还没做）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Coding" scheme="https://bili33.top/categories/Coding/"/>
    
    
    <category term="Coding" scheme="https://bili33.top/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的Python ACM Ch.4：序列和字符串的算法</title>
    <link href="https://bili33.top/posts/Go-for-Python-Ch4/"/>
    <id>https://bili33.top/posts/Go-for-Python-Ch4/</id>
    <published>2022-10-29T00:12:55.000Z</published>
    <updated>2022-10-29T02:10:32.228Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="UVa272-TeX中的引号"><a href="#UVa272-TeX中的引号" class="headerlink" title="UVa272 TeX中的引号"></a>UVa272 TeX中的引号</h3><p><a href="https://vjudge.net/problem/UVA-272">TEX Quotes - UVA 272 - Virtual Judge (vjudge.net)</a></p><ul><li>在Tex中，左引号是&#96;&#96;,右引号是’ ‘。</li><li>给定一段包含双引号的段落，你的任务是把它转换成Tex的格式。</li></ul><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Go-for-Python-Ch4/Tex.png"></p><h4 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ArticleInput = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;To be or not to be,&quot; quoth the bard, &quot;that</span></span><br><span class="line"><span class="string">is the question&quot;.</span></span><br><span class="line"><span class="string">The programming contestant replied: &quot;I must disagree.</span></span><br><span class="line"><span class="string">To `C&#x27; or not to `C&#x27;, that is The Question!&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">ArticleOutput = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">start = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> place <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ArticleInput)):</span><br><span class="line">    <span class="keyword">if</span> ArticleInput[place] == <span class="string">&#x27;&quot;&#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> flag:</span><br><span class="line">        ArticleOutput += ArticleInput[start:place] + <span class="string">&quot;``&quot;</span></span><br><span class="line">        start = place + <span class="number">1</span></span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> ArticleInput[place] == <span class="string">&#x27;&quot;&#x27;</span> <span class="keyword">and</span> flag:</span><br><span class="line">        ArticleOutput += ArticleInput[start:place] + <span class="string">&quot;&#x27;&#x27;&quot;</span></span><br><span class="line">        start = place + <span class="number">1</span></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ArticleOutput)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">``To be or not to be,&#x27;&#x27; quoth the bard, ``that</span><br><span class="line">is the question&#x27;&#x27;.</span><br><span class="line">The programming contestant replied: ``I must disagree.</span><br><span class="line">To `C&#x27; or not to `C&#x27;, that is The Question!&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="UVa10082-WERTYU"><a href="#UVa10082-WERTYU" class="headerlink" title="UVa10082 WERTYU"></a><strong>UVa10082 WERTYU</strong></h3><p>把手放在键盘上，稍不注意就会往右错一位。这样，输入Q会变成输入W，输入J会变成输入K等。键盘如图所示。 输入一个错位后敲出来的字符串（所有字母均大写），输出打字员本来想打出的矩阵输入保证合法，即一定是错位之后的字符串。例如输入中不会出现大写字母A。多行输入 每行包括数字，空格，大写字母（除了Q，A，Z）或者是标点符号（除了“’”(L右面第2个)），标有单词的按键，如Tab，BackSp，Control等等不会出现。你需要用每个字母或者符号左面的（在如图给出的QWERTY类型的键盘）那个按键内容替换他，输入的空格不作处理，依然输出空格。</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Go-for-Python-Ch4/UVa10082.jpg"></p><h4 id="个人题解（打表真累……）"><a href="#个人题解（打表真累……）" class="headerlink" title="个人题解（打表真累……）"></a>个人题解（打表真累……）</h4><p><a href="https://www.cnblogs.com/1v7w/p/13870486.html">UVa10082 - WERTYU 题解 - 1v7w - 博客园 (cnblogs.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">KeyboardInput = <span class="string">&#x27;O S, GOMR YPFSU/&#x27;</span></span><br><span class="line"></span><br><span class="line">KeyMap = &#123;</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span>: <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;E&#x27;</span>: <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>: <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;T&#x27;</span>: <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>: <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>: <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;I&#x27;</span>: <span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;O&#x27;</span>: <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;P&#x27;</span>: <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;[&#x27;</span>: <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>: <span class="string">&#x27;]&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;S&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>: <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;H&#x27;</span>: <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;J&#x27;</span>: <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;K&#x27;</span>: <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;L&#x27;</span>: <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;:&#x27;</span>: <span class="string">&#x27;L&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>: <span class="string">&#x27;:&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X&#x27;</span>: <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;V&#x27;</span>: <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;N&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;M&#x27;</span>: <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;,&#x27;</span>: <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;.&#x27;</span>: <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;/&#x27;</span>: <span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;-&#x27;</span>: <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;=&#x27;</span>: <span class="string">&#x27;-&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Output = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> KeyboardInput:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        Output += KeyMap[key]</span><br><span class="line">    <span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">        Output += <span class="string">&#x27; &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Output)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I AM FINE TODAY.</span><br></pre></td></tr></table></figure><p>属于是牺牲空间换时间了~</p><h3 id="回文串和镜像串的判断"><a href="#回文串和镜像串的判断" class="headerlink" title="回文串和镜像串的判断"></a><strong>回文串和镜像串的判断</strong></h3><p>输入一个字符串，判断它是否为回文串以及镜像（左右翻转）串。输入字符串保证不含数字0。所谓回文串，就是反转以后与原串相同，如abba和madam。所谓镜像串，就是左右镜像之后和原串相同，如2S和3AIAE。注意，并不是每个字符在镜像之后都能得到一个合法字符。（空白项表示该字符镜像后不能得到一个合法字符。）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Go-for-Python-Ch4/Mirror-and-Reverse.png"></p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Go-for-Python-Ch4/Mirror-and-Reverse-Sample.png"></p><h4 id="个人题解-1"><a href="#个人题解-1" class="headerlink" title="个人题解"></a>个人题解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">InputStrings = <span class="string">&#x27;&#x27;&#x27;NOTAPALINDROME</span></span><br><span class="line"><span class="string">ISAPALINILAPASI</span></span><br><span class="line"><span class="string">2A3MEAS</span></span><br><span class="line"><span class="string">ATOYOTA&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">MirrorMap = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;H&#x27;</span>: <span class="string">&#x27;H&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;I&#x27;</span>: <span class="string">&#x27;I&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;J&#x27;</span>: <span class="string">&#x27;L&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;L&#x27;</span>: <span class="string">&#x27;J&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;M&#x27;</span>: <span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span>: <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;S&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>: <span class="string">&#x27;T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>: <span class="string">&#x27;U&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span>: <span class="string">&#x27;V&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span>: <span class="string">&#x27;W&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X&#x27;</span>: <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span>: <span class="string">&#x27;Y&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Z&#x27;</span>: <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;S&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;E&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;Z&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;8&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> InputStrings.split(<span class="string">&#x27;\n&#x27;</span>):</span><br><span class="line">    Reverse = <span class="literal">True</span> <span class="keyword">if</span> string == string[::-<span class="number">1</span>] <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">    Mirror = <span class="literal">False</span></span><br><span class="line">    MirrorString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    Valid = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> Valid:</span><br><span class="line">            <span class="keyword">if</span> MirrorMap.get(char, <span class="literal">False</span>):</span><br><span class="line">                MirrorString += MirrorMap[char]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Valid = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> Valid <span class="keyword">and</span> MirrorString == string[::-<span class="number">1</span>]:</span><br><span class="line">        Mirror = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> Reverse <span class="keyword">and</span> Mirror:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;string&#125;</span> -- is a mirrored palindrome.&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> Reverse <span class="keyword">and</span> <span class="keyword">not</span> Mirror:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;string&#125;</span> -- is a regular palindrome.&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> Reverse <span class="keyword">and</span> Mirror:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;string&#125;</span> -- is a mirrored string.&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;string&#125;</span> -- is not a palindrome.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NOTAPALINDROME -- is not a palindrome.</span><br><span class="line">ISAPALINILAPASI -- is a regular palindrome.</span><br><span class="line">2A3MEAS -- is a mirrored string.</span><br><span class="line">ATOYOTA -- is a mirrored palindrome.</span><br></pre></td></tr></table></figure><h3 id="UVa340-猜数字游戏的提示"><a href="#UVa340-猜数字游戏的提示" class="headerlink" title="UVa340 猜数字游戏的提示"></a>UVa340 <strong>猜数字游戏的提示</strong></h3><p>这是一个猜数游戏，第1行是答案序列的长度，也是询问的序列的长度（输入0结束），第2行是答案序列，接下来n行是询问序列，直到输入全0结束，每一个询问你都得给出回答，(x,y)，x代表的是输入的序列中的数字与答案序列中的数字有几个是吻合的，y代表输入序列中的数字与答案序列中的数字有几个相同的，但是不在同一位置，也就是不吻合。现在请你编程实现这个功能。</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Go-for-Python-Ch4/Number-Game.png"></p><h4 id="个人题解-2"><a href="#个人题解-2" class="headerlink" title="个人题解"></a>个人题解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">length = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Length: &#x27;</span>))</span><br><span class="line">Origin = <span class="built_in">input</span>(<span class="string">&#x27;Origin Input (Split with space): &#x27;</span>).split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getOutput</span>(<span class="params">Input</span>):</span><br><span class="line">    NumCount = getNumMatch(Input)</span><br><span class="line">    PosCount = getPosMatch(Input)</span><br><span class="line">    <span class="keyword">return</span> (PosCount, NumCount)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNumMatch</span>(<span class="params">Input</span>):</span><br><span class="line">    NumCount = <span class="number">0</span></span><br><span class="line">    InputList = Input.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    CheckedList = []</span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(InputList)):</span><br><span class="line">        <span class="keyword">if</span> InputList[pos] <span class="keyword">in</span> Origin <span class="keyword">and</span> InputList[pos] == Origin[pos]:</span><br><span class="line">            CheckedList.append(InputList[pos])</span><br><span class="line">        <span class="keyword">if</span> InputList[pos] <span class="keyword">in</span> Origin <span class="keyword">and</span> InputList[pos] != Origin[pos] <span class="keyword">and</span> <span class="keyword">not</span> InputList[pos] <span class="keyword">in</span> CheckedList:</span><br><span class="line">            <span class="built_in">print</span>(pos)</span><br><span class="line">            NumCount += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> NumCount</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPosMatch</span>(<span class="params">Input</span>):</span><br><span class="line">    PosMatch = <span class="number">0</span></span><br><span class="line">    InputList = Input.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(InputList, Origin)</span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="keyword">if</span> InputList[pos] == Origin[pos]:</span><br><span class="line">            PosMatch += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> PosMatch</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        Input = <span class="built_in">input</span>(<span class="string">&#x27;Input: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(Input.split(<span class="string">&#x27; &#x27;</span>)) == length <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">any</span>(Input.split(<span class="string">&#x27; &#x27;</span>)):   <span class="comment"># any()一旦里面有一个不是0就会返回True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Result = getOutput(Input)</span><br><span class="line">            <span class="built_in">print</span>(Result)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Coding" scheme="https://bili33.top/categories/Coding/"/>
    
    
    <category term="Coding" scheme="https://bili33.top/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的Python ACM Ch.3：队列、链表与二叉树</title>
    <link href="https://bili33.top/posts/Go-for-Python-Ch3/"/>
    <id>https://bili33.top/posts/Go-for-Python-Ch3/</id>
    <published>2022-10-22T00:06:31.000Z</published>
    <updated>2022-10-29T00:13:26.316Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列，跟现实中一样，遵循先进先出的原则<code>FIFO</code>，从尾巴进去，从头部出来</p><h3 id="用列表模拟队列"><a href="#用列表模拟队列" class="headerlink" title="用列表模拟队列"></a>用列表模拟队列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enquen</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.data.append(value)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequen</span>(<span class="params">self</span>):</span><br><span class="line">        value = self.data[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">del</span> self.data[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>删除会比较慢（不如链表构建的队列），因为每次<code>del</code>都是一个完整的<code>O(n)</code>操作</p><h3 id="用链表模拟队列"><a href="#用链表模拟队列" class="headerlink" title="用链表模拟队列"></a>用链表模拟队列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value=<span class="literal">None</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enquen</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:   <span class="comment"># 当头为空</span></span><br><span class="line">            self.head = Node(value) <span class="comment"># 将头设置为新节点</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        tail: Node = self.head</span><br><span class="line">        <span class="keyword">while</span> tail.<span class="built_in">next</span>:</span><br><span class="line">            tail = tail.<span class="built_in">next</span></span><br><span class="line">        tail.<span class="built_in">next</span> = Node(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequen</span>(<span class="params">self</span>):</span><br><span class="line">        value = self.head.value</span><br><span class="line">        self.head = self.head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> </span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        head = self.head</span><br><span class="line">        <span class="keyword">while</span> head != <span class="literal">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p><code>size</code>还可以作为属性来写，更方便</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value=<span class="literal">None</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enquen</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:   <span class="comment"># 当头为空</span></span><br><span class="line">            self.head = Node(value) <span class="comment"># 将头设置为新节点</span></span><br><span class="line">            self.size += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        tail: Node = self.head</span><br><span class="line">        <span class="keyword">while</span> tail.<span class="built_in">next</span>:</span><br><span class="line">            tail = tail.<span class="built_in">next</span></span><br><span class="line">        tail.<span class="built_in">next</span> = Node(value)</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequen</span>(<span class="params">self</span>):</span><br><span class="line">        value = self.head.value</span><br><span class="line">        self.head = self.head.<span class="built_in">next</span></span><br><span class="line">        self.size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><h2 id="例题：击鼓传花"><a href="#例题：击鼓传花" class="headerlink" title="例题：击鼓传花"></a>例题：击鼓传花</h2><p>一共有<code>n</code>个人玩击鼓传花小游戏，步数为<code>p</code>，问最后活下来的是谁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">game</span>(<span class="params">persons: <span class="built_in">list</span>, step: <span class="built_in">int</span></span>):</span><br><span class="line">    last = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(persons) &gt; <span class="number">1</span>:</span><br><span class="line">        last += step</span><br><span class="line">        last = last % <span class="built_in">len</span>(persons)</span><br><span class="line">        <span class="keyword">del</span> persons[last]</span><br><span class="line">    <span class="keyword">return</span> persons[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(game(<span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>), <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">=== Output ===</span></span><br><span class="line"><span class="string">A</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="链表与二叉树"><a href="#链表与二叉树" class="headerlink" title="链表与二叉树"></a>链表与二叉树</h2><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TD;1--&gt;2;1--&gt;3;1--&gt;4;3--&gt;5;3--&gt;6;3--&gt;7;4--&gt;8;4--&gt;9;7--&gt;10;7--&gt;11;11--&gt;12;  </pre></div><p>如图，用链表模拟二叉树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.childs = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">depth</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.childs: <span class="comment"># 没有孩子节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>([node.depth() <span class="keyword">for</span> node <span class="keyword">in</span> self.childs])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter_depth</span>(<span class="params">self</span>):   <span class="comment"># 深度优先</span></span><br><span class="line">        items = []</span><br><span class="line">        items.append(self.value)</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> self.childs:</span><br><span class="line">            items.extend(child.iter_depth())</span><br><span class="line">        <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter_width</span>(<span class="params">self</span>):   <span class="comment"># 广度优先</span></span><br><span class="line">        items = [self.value]</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> self.childs:</span><br><span class="line">            items.extend(child.iter_width())</span><br><span class="line">        <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root = Node(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">5</span>):</span><br><span class="line">    root.childs.append(Node(i))</span><br><span class="line"></span><br><span class="line">node: Node = root.childs[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">8</span>):</span><br><span class="line">    node.childs.append(i)</span><br><span class="line"></span><br><span class="line">node = root.childs[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>,<span class="number">10</span>):</span><br><span class="line">    node.childs.append(i)</span><br><span class="line"></span><br><span class="line">node = root.childs[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">12</span>):</span><br><span class="line">    node.childs.append(i)</span><br><span class="line"></span><br><span class="line">node = node[<span class="number">1</span>]</span><br><span class="line">node.childs.append(<span class="number">12</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Coding" scheme="https://bili33.top/categories/Coding/"/>
    
    
    <category term="Coding" scheme="https://bili33.top/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的Python ACM Ch.2：时间复杂度、栈、面向对象及链表</title>
    <link href="https://bili33.top/posts/Go-for-Python-Ch2/"/>
    <id>https://bili33.top/posts/Go-for-Python-Ch2/</id>
    <published>2022-10-18T11:38:45.000Z</published>
    <updated>2022-10-29T00:13:48.229Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="列表与字典的时间复杂度"><a href="#列表与字典的时间复杂度" class="headerlink" title="列表与字典的时间复杂度"></a>列表与字典的时间复杂度</h2><p>列表的<code>ls.append()</code>复杂度是<code>O(n)</code>，字典的插入<code>dt[&#39;key&#39;] = value</code>的复杂度是<code>O(1)</code>。Python自带的字典排序<code>ls.sort()</code>复杂度是<code>O(nlogn)</code>（这个排序算法是用C语言写的，基本上自己在Python里面写的排序算法都没有它快</p><h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h2><p>基本操作：</p><ul><li>压栈<code>stack.append(element)</code></li><li>出栈    <code>del stack[-1]</code></li><li>判断是否为空    <code>len(stack) == 0</code></li></ul><h2 id="面向对象的Python编程"><a href="#面向对象的Python编程" class="headerlink" title="面向对象的Python编程"></a>面向对象的Python编程</h2><p>以栈对象为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):<span class="comment"># 构造类里面的函数，在每次实例化的同时会自动调用__init__函数</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.summary = x + y</span><br><span class="line">s = Stack(<span class="number">3</span>, <span class="number">4</span>)<span class="comment"># 得到一个Stack类型的实例（实例化）</span></span><br><span class="line"><span class="built_in">print</span>(s.x, s.y, s.summary)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">=== Output ===</span></span><br><span class="line"><span class="string">3 4 7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>更深一步，在对象里面定义对象的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):<span class="comment"># 构造类里面的函数，在每次实例化的同时会自动调用__init__函数</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">summary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x + self.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line">        self.b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Stack(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 得到一个Stack类型的实例（实例化）</span></span><br><span class="line"><span class="built_in">print</span>(s.summary())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">=== Output ===</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>创建一个类型<code>Rect</code>（矩形），能执行以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">r1 = Rect(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(r1.width)<span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(r1.height)<span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(r1.area())<span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(r1.length())<span class="comment"># 60</span></span><br><span class="line"></span><br><span class="line">r2 = Rect(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(r2.area())</span><br></pre></td></tr></table></figure><p>我的题解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rect</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, width, height</span>):</span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.width * self.height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.width + self.height) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r1 = Rect(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(r1.width)<span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(r1.height)  <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(r1.area())  <span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(r1.length())  <span class="comment"># 60</span></span><br><span class="line"></span><br><span class="line">r2 = Rect(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(r2.area())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">=== Output ===</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">20</span></span><br><span class="line"><span class="string">200</span></span><br><span class="line"><span class="string">60</span></span><br><span class="line"><span class="string">30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="例题：使用列表模拟栈"><a href="#例题：使用列表模拟栈" class="headerlink" title="例题：使用列表模拟栈"></a>例题：使用列表模拟栈</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enquen</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.data.append(value)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequen</span>(<span class="params">self</span>):</span><br><span class="line">        value = self.data[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">del</span> self.data[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEnpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.data) == <span class="number">0</span></span><br></pre></td></tr></table></figure><p>对栈进行操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enquen</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.data.append(value)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequen</span>(<span class="params">self</span>):</span><br><span class="line">        value = self.data[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">del</span> self.data[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.data) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    stack = Stack()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        stack.enquen(random.randint(<span class="number">0</span>,<span class="number">100</span>))</span><br><span class="line">    <span class="built_in">print</span>(stack.data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        value = stack.dequen()</span><br><span class="line">        <span class="built_in">print</span>(value, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(stack.data)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">=== Output ===</span></span><br><span class="line"><span class="string">[3, 88, 78, 41, 28, 81, 33, 91, 86, 17, 57, 39, 17, 17, 98, 69, 65, 86, 83, 60, 67, 10, 95, 8, 66, 37, 10, 64, 41, 79, 39, 57, 32, 44, 62, 28, 32, 75, 41, 42, 87, 8, 7, 82, 85, 54, 2, 13, 96, 70, 1, 25, 47, 10, 75, 29, 92, 60, 29, 73, 24, 76, 5, 70, 62, 5, 85, 54, 25, 44, 37, 53, 11, 39, 25, 67, 37, 6, 99, 58, 97, 33, 26, 35, 50, 73, 48, 49, 16, 89, 2, 86, 28, 10, 89, 91, 1, 81, 9, 26]</span></span><br><span class="line"><span class="string">26 9 81 1 91 89 10 28 86 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[3, 88, 78, 41, 28, 81, 33, 91, 86, 17, 57, 39, 17, 17, 98, 69, 65, 86, 83, 60, 67, 10, 95, 8, 66, 37, 10, 64, 41, 79, 39, 57, 32, 44, 62, 28, 32, 75, 41, 42, 87, 8, 7, 82, 85, 54, 2, 13, 96, 70, 1, 25, 47, 10, 75, 29, 92, 60, 29, 73, 24, 76, 5, 70, 62, 5, 85, 54, 25, 44, 37, 53, 11, 39, 25, 67, 37, 6, 99, 58, 97, 33, 26, 35, 50, 73, 48, 49, 16, 89]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="例题：匹配括号"><a href="#例题：匹配括号" class="headerlink" title="例题：匹配括号"></a>例题：匹配括号</h3><p>已知一串由小括号<code>(</code> <code>)</code>组成的字符串，试判断该字符串中的括号组合是否合法</p><p>我的题解（时间复杂度<code>O(n^2)</code>，因为<code>replace</code>要先查找再替换，进行了两次遍历：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = ()()()(((())))))()</span><br><span class="line">result = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;()&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">        result = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span>:</span><br><span class="line">        result = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    s.replace(<span class="string">&#x27;()&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>优化版（利用栈的特性）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enquen</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.data.append(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequen</span>(<span class="params">self</span>):</span><br><span class="line">        value = self.data[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">del</span> self.data[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.data) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;()()()(((())))))()&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    result=-<span class="number">1</span></span><br><span class="line">    stack=Stack()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            stack.enquen(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> stack.isEmpty():</span><br><span class="line">                result=<span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            stack.dequen()</span><br><span class="line">        result=stack.isEmpty()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="例题：匹配括号（升级版）"><a href="#例题：匹配括号（升级版）" class="headerlink" title="例题：匹配括号（升级版）"></a>例题：匹配括号（升级版）</h3><p>在上一题的基础上，括号不只有小括号了，还有中括号<code>[]</code>和花括号<code>&#123;&#125;</code>，同样判断括号对是否合法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enquen</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.data.append(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequen</span>(<span class="params">self</span>):</span><br><span class="line">        value = self.data[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">del</span> self.data[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.data) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;()(((()))))))&#123;&#123;&#125;&#125;&#125;&#125;[[]]]]]])&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    result = -<span class="number">1</span></span><br><span class="line">    stack = Stack()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">&quot;([&#123;&quot;</span>:</span><br><span class="line">            stack.enquen(c)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> stack.isEmpty():</span><br><span class="line">                result = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            value = stack.dequen()</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span> <span class="keyword">and</span> value == <span class="string">&#x27;(&#x27;</span>) <span class="keyword">or</span> (c == <span class="string">&#x27;]&#x27;</span> <span class="keyword">and</span> value == <span class="string">&#x27;[&#x27;</span>) <span class="keyword">or</span> (c == <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">and</span> value == <span class="string">&#x27;&#123;&#x27;</span>):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        result = stack.isEmpty()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="all-x2F-any-的用法"><a href="#all-x2F-any-的用法" class="headerlink" title="all()&#x2F;any()的用法"></a>all()&#x2F;any()的用法</h2><p>官方说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">all()</span><br><span class="line"></span><br><span class="line">Return True if bool(x) is True for all values x in the iterable.</span><br><span class="line"></span><br><span class="line">If the iterable is empty, return True.</span><br><span class="line"></span><br><span class="line">=========================================================================</span><br><span class="line"></span><br><span class="line">any()</span><br><span class="line"></span><br><span class="line">Return True if bool(x) is True for any x in the iterable.</span><br><span class="line"></span><br><span class="line">If the iterable is empty, return False.</span><br></pre></td></tr></table></figure><p>应用举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dt = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">0</span>, <span class="number">3</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>(dt.values()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>(dt.values()))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">=== Output ===</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>因为字典里面不全是<code>1</code>，在Python里面，<code>1</code>代表<code>True</code>，不全为<code>1</code>所以为<code>False</code>，但是对于<code>any</code>函数，里面一旦出现了<code>True</code>就返回<code>True</code>，所以这里是<code>True</code></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表里面的基本单位是<code>结点(node)</code>，单链表只存储值和下一节点的位置，双链表保存到一个上一节点的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:<span class="comment"># 单链表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value, <span class="built_in">next</span></span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:<span class="comment"># 双链表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value, prev, <span class="built_in">next</span></span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        self.prev = prev</span><br></pre></td></tr></table></figure><h3 id="用双链表模拟栈"><a href="#用双链表模拟栈" class="headerlink" title="用双链表模拟栈"></a>用双链表模拟栈</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:<span class="comment"># 双链表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value, prev = <span class="literal">None</span>, <span class="built_in">next</span> = <span class="literal">None</span></span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.prev = prev</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.tail = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enquen</span>(<span class="params">self, value</span>):</span><br><span class="line">        node = Node(value)</span><br><span class="line">        node.prev = self.tail</span><br><span class="line">        <span class="keyword">if</span> self.tail:</span><br><span class="line">            self.tail.<span class="built_in">next</span> = node</span><br><span class="line">            self.tail = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequen</span>(<span class="params">self</span>):</span><br><span class="line">        self.tail = self.tail.prev</span><br><span class="line">        <span class="keyword">if</span> self.tail:</span><br><span class="line">        self.tail.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        self.tail == <span class="literal">None</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Coding" scheme="https://bili33.top/categories/Coding/"/>
    
    
    <category term="Coding" scheme="https://bili33.top/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的Python ACM Ch.1：数据类型及基本数据处理</title>
    <link href="https://bili33.top/posts/Go-for-Python-Ch1/"/>
    <id>https://bili33.top/posts/Go-for-Python-Ch1/</id>
    <published>2022-10-15T00:15:51.000Z</published>
    <updated>2022-10-29T00:14:00.396Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="可迭代数据类型"><a href="#可迭代数据类型" class="headerlink" title="可迭代数据类型"></a>可迭代数据类型</h3><p>通用操作： </p><ul><li>遍历</li><li>max</li><li>min</li><li>sum</li><li>len</li><li>成员测试 in、not in</li></ul><h3 id="序列数据类型"><a href="#序列数据类型" class="headerlink" title="序列数据类型"></a>序列数据类型</h3><p>通用操作： </p><ul><li>索引 </li><li>切片 </li><li>index </li><li>count </li><li>同类型加法拼接 </li><li>整数乘法重复</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>不可变数据类型（对字符串的所有修改操作，都是返回一个新的字符串）</p><p>特有操作：</p><ul><li><code>s.upper() </code></li><li><code>s.lower() </code></li><li><code>s.replace(sub1, sub2) </code></li><li><code>s.join(Iterable[str]) </code></li><li><code>s.format() </code></li><li><code>s.split(c)</code></li></ul><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>不可变数据类型，基本是拿来用索引，或者切片</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>可变数据类型</p><p>特有操作： </p><ul><li><p>通过索引进行修改 </p></li><li><p>通过切片进行修改 </p></li><li><p><code>ls.append(x) </code></p></li><li><p>del ls[i] i为元素索引 </p></li><li><p><code>ls.remove(x)</code> x为元素值 </p></li><li><p><code>ls.extend(lt2) </code></p></li><li><p><code>ls.insert(i, x) </code></p></li><li><p><code>ls.reverse() </code></p></li><li><p><code>ls.clear()</code></p></li><li><p>列表表达式</p></li></ul><h4 id="集合-amp-字典"><a href="#集合-amp-字典" class="headerlink" title="集合 &amp; 字典"></a>集合 &amp; 字典</h4><p>集合中的元素、字典的键 都必须为不可变数据类型，不能重复 </p><p>如果直接对字典进行<code>for</code>循环的遍历，那么出来的是字典的键</p><p>集合的特有方法：</p><ul><li><code>s.pop()</code> 弹出集合s中的一个元素 </li><li><code>s.add(x)</code> 将x添加到集合s中 </li><li><code>s.remove(x)</code> 删除集合s中的元素x，x不存在则出错 </li><li><code>s.discard(x)</code> 删除集合s中的元素x，x不存在不出错 </li><li><code>s.update(t)</code> 将集合t合并到集合s中 </li><li><code>s.clear()</code> 清空集合s </li><li><code>s-t</code> 差集 </li><li><code>s&amp;t</code> 交集 </li><li><code>s|t</code> 并集 </li><li><code>s^t</code> 并集减去交集 </li><li><code>s.isdisjoint(t)</code> 判断是否相交 比较操作 判断包含关系</li></ul><p>字典的特有方法： </p><ul><li><p>通过键进行索引 </p></li><li><p><code>d.keys()</code> 所有键的迭代器 </p></li><li><p><code>d.values()</code> 所有值的迭代器 </p></li><li><p><code>d.items()</code> 所有键值对的迭代器 </p></li><li><p><code>d.get(key, default)</code> 如果key存在，返回d[key]，否则返回default </p></li><li><p><code>d.pop(key, default)</code> 返回 <code>d.get(key, default)</code> 并不出错的删除key </p></li><li><p><code>d.popitem() </code></p></li><li><p><code>d.update(d2)</code></p></li></ul><h2 id="列表表达式"><a href="#列表表达式" class="headerlink" title="列表表达式"></a>列表表达式</h2><p>一般我们使用的列表长这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">123</span>,<span class="number">456</span>,<span class="number">789</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>但是Python里面有个东西叫做列表表达式，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>)]</span><br></pre></td></tr></table></figure><p>这会生成一个带有0-99的<code>int</code>数据类型的列表，非常简洁</p><h2 id="列表的排序"><a href="#列表的排序" class="headerlink" title="列表的排序"></a>列表的排序</h2><p>一般来说，你自己在Python里面写的对列表进行排序的函数，都不如内置的<code>list().sort(*, key=key, reverse=False)</code>要快，谁让人家是C语言写的排序呢……</p><p>但是<code>list().sort()</code>有个坑，我前两天帮人数学建模的时候还是踩进了这个坑，就是：这个方法是直接作用于列表本身，没有返回值的，所以进行赋值的时候就会变成<code>none</code></p><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><p>下面的列表<code>a</code>是人物的名字，<code>b</code>是他们对应的年龄，请输出18岁以下的人物并根据他们的年龄进行升序排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;iron man&#x27;</span>,<span class="string">&#x27;jerry&#x27;</span>, <span class="string">&#x27;donald&#x27;</span>, <span class="string">&#x27;micky&#x27;</span>, <span class="string">&#x27;spider man&#x27;</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><p>我的做法是用多一个列表，往里面用元组的形式填他们的名字以及年龄信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    pos = a.index(i)</span><br><span class="line">    age = b[pos]</span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line">        ls.append((i,age))</span><br></pre></td></tr></table></figure><p>对<code>ls</code>进行打印，得出这样的一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">&#x27;tom&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;jerry&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;donald&#x27;</span>, <span class="number">8</span>), (<span class="string">&#x27;micky&#x27;</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure><p>再通过<code>sort</code>函数和<code>lambda</code>表达式进行排序，对所需要的东西进行打印</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ls:</span><br><span class="line">    <span class="built_in">print</span>(i[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jerry</span><br><span class="line">micky</span><br><span class="line">tom</span><br><span class="line">donald</span><br></pre></td></tr></table></figure><p>但是经过教员的提醒，还有个<code>zip()</code>函数可以直接把两个列表中的对应位置的元素合在一起变成元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">items = <span class="built_in">list</span>(<span class="built_in">zip</span>(a,b))</span><br></pre></td></tr></table></figure><p>这样做的结果跟上面的<code>ls</code>的结果是一样的</p><p>然后再在列表表达式里面筛选，两步可以合在一起</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">items = [item <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>(<span class="built_in">zip</span>(a,b)) <span class="keyword">if</span> item[<span class="number">1</span>] &lt; <span class="number">18</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">    <span class="built_in">print</span>(i[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><strong>启示：少用字典，筛选放在后面去</strong></p><h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h3><p><a href="https://leetcode.cn/problems/find-target-indices-after-sorting-array/">2089. 找出数组排序后的目标下标 - 力扣（LeetCode）</a></p><p>我的题解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">targetIndices</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        nums.sort()</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == target:</span><br><span class="line">                result.append(i)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>优化版（因为找到了以后，再往后就不存在要找的了，所以可以直接<code>break</code>掉）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">targetIndices</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        nums.sort()</span><br><span class="line">        result = []</span><br><span class="line">        found = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == target:</span><br><span class="line">                result.append(i)</span><br><span class="line">            <span class="keyword">if</span> nums[i] != target <span class="keyword">and</span> found:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="例题3"><a href="#例题3" class="headerlink" title="例题3"></a>例题3</h3><p><a href="https://leetcode.cn/problems/find-the-difference-of-two-arrays/submissions/">2215. 找出两数组的不同 - 力扣（LeetCode）</a></p><p>我的题解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findDifference</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        answer = [[],[]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums1:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> nums2 <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> answer[<span class="number">0</span>]:</span><br><span class="line">                answer[<span class="number">0</span>].append(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums2:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> nums1 <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> answer[<span class="number">1</span>]:</span><br><span class="line">                answer[<span class="number">1</span>].append(i)</span><br><span class="line">        <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p>优化版（找不同的可以用集合去做）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findDifference</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        s1 = <span class="built_in">set</span>(nums1)</span><br><span class="line">        s2 = <span class="built_in">set</span>(nums2)</span><br><span class="line">        answer = [[],[]]</span><br><span class="line">        answer[<span class="number">0</span>] = <span class="built_in">list</span>(s1-s2)</span><br><span class="line">        answer[<span class="number">1</span>] = <span class="built_in">list</span>(s2-s1)</span><br><span class="line">        <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><h3 id="例题4"><a href="#例题4" class="headerlink" title="例题4"></a>例题4</h3><p><a href="https://leetcode.cn/problems/minimum-index-sum-of-two-lists/submissions/">599. 两个列表的最小索引总和 - 力扣（LeetCode）</a></p><p>我的题解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findRestaurant</span>(<span class="params">self, list1: <span class="type">List</span>[<span class="built_in">str</span>], list2: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        lovedRest = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> list2:</span><br><span class="line">                indexSum = list1.index(i) + list2.index(i)</span><br><span class="line">                lovedRest.append((i,indexSum))</span><br><span class="line">        lovedRest.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">        result = []</span><br><span class="line">        result.append(lovedRest[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(lovedRest)):</span><br><span class="line">            <span class="keyword">if</span> lovedRest[i][<span class="number">1</span>] == lovedRest[<span class="number">0</span>][<span class="number">1</span>]: result.append(lovedRest[i][<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p><code>enumerate(list)</code>在遍历的过程中出现<code>index, value</code>的返回值，可以在for循环使用，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...(上面已经定义了ls为列表)</span><br><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(ls):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>所以上面这一题也可以改一改，用这个方法可以免去用<code>ls.index()</code>的麻烦</p><h3 id="例题5"><a href="#例题5" class="headerlink" title="例题5"></a>例题5</h3><p><a href="https://leetcode.cn/problems/find-all-k-distant-indices-in-an-array/submissions/">2200. 找出数组中的所有 K 近邻下标 - 力扣（LeetCode）</a></p><p>我的题解（<code>OT</code>了）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">abs</span>(<span class="params">num</span>):</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> num*-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findKDistantIndices</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], key: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        keyPos = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(nums)) <span class="keyword">if</span> nums[i] == key]</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> keyPos:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(i-pos)&lt;=k <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> result: result.append(i) </span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">pass</span></span><br><span class="line">        result.sort()</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>优化版：</p><p>思路是从<code>i</code>所在位置往左往右<code>k</code>个位置是否有key，如果有的话就进行计算，没有就跳过，省去了很多遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findKDistantIndices</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], key: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> nums[<span class="built_in">max</span>(<span class="number">0</span>,i-k):i+k+<span class="number">1</span>]:</span><br><span class="line">                result.append(i)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="列表的空间"><a href="#列表的空间" class="headerlink" title="列表的空间"></a>列表的空间</h2><p>列表在内存中是连续的，但是如果要用申请的空间之外的地方的话（即加长列表）就要再次申请，会减慢运行，所以可以先申请一大片空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">0</span>]*<span class="number">1000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Coding" scheme="https://bili33.top/categories/Coding/"/>
    
    
    <category term="Coding" scheme="https://bili33.top/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>使用Python和Qt5来制作带有GUI的程序（持续更新）</title>
    <link href="https://bili33.top/posts/Making-GUI-with-PyQt5/"/>
    <id>https://bili33.top/posts/Making-GUI-with-PyQt5/</id>
    <published>2022-10-06T07:12:19.000Z</published>
    <updated>2022-10-06T07:23:27.491Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>我还是向我不熟悉的领域发起了挑战——制作GUI</p><p>印象中我做GUI只有在<a href="http://app.gzjkw.net/">MIT App Inventor (gzjkw.net)</a>和<code>Visual Basics</code>里面做过（下图为以前拿去参赛的作品，获得了省三），而且VB很久都没用过了</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets/img/Making-GUI-with-PyQt5/msedge-20221006-151746.png"></p><p>这回主要是创新项目的需要，要做一个带有GUI的附属程序，所以我研究起了怎么做GUI</p><p>我用的是比较知名的Qt5这个东西（本来还尝试过<code>dearpygui</code> <code>Tkinker</code> <code>pygame</code>之类的，但是因为感觉太繁琐了就不用了）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Tech" scheme="https://bili33.top/categories/Tech/"/>
    
    
    <category term="Tech" scheme="https://bili33.top/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry 4B 折腾记录（持续更新）</title>
    <link href="https://bili33.top/posts/Raspberry-4B-Log/"/>
    <id>https://bili33.top/posts/Raspberry-4B-Log/</id>
    <published>2022-10-05T07:23:46.000Z</published>
    <updated>2022-12-01T15:12:25.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="烧录系统"><a href="#烧录系统" class="headerlink" title="烧录系统"></a>烧录系统</h3><p>我用的是<code>balenaEtcher</code>这个软件（别问为什么，问就是好看），比起Win32DiskImager和Rufus来说更好用一点（个人感觉）</p><p>（↓没插读卡器所以用磁盘代替一下，千万别写入磁盘！）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Raspberry-4B-Log/balenaEtcher-20221005-225233.png"></p><h3 id="对ext4格式的存储介质进行写入"><a href="#对ext4格式的存储介质进行写入" class="headerlink" title="对ext4格式的存储介质进行写入"></a>对ext4格式的存储介质进行写入</h3><p>我用的是DiskGenius，但是不知道为什么在我的电脑上打开会提示这个……</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Raspberry-4B-Log/ntleah-20221005-151900.png"></p><p><code>Err: NTLEAS may be lost connection with hook process.</code></p><p>我这个用的是<code>5.1.1</code>的中文专业版（免费版不能对ext4格式进行写入），因为打不开所以我去换了个版本。</p><p>从网上下了个<code>5.2.0.884</code>就好了，就，很奇怪，估计是这个版本的问题。</p><h3 id="重装Kali-Linux后在无屏幕的条件下自动连接WIFI（未解决）"><a href="#重装Kali-Linux后在无屏幕的条件下自动连接WIFI（未解决）" class="headerlink" title="重装Kali Linux后在无屏幕的条件下自动连接WIFI（未解决）"></a>重装Kali Linux后在无屏幕的条件下自动连接WIFI（未解决）</h3><p>这个我在网上找了很多方法，但是我发现很多他们都是用的树莓派自己的Debian衍生系统，用的不是Kali，这个方法用在Kali上等于无效……</p><p>直到我发现了这几个</p><p><a href="https://blog.csdn.net/yayale01/article/details/107132570">树莓派 kali Linux 开机自动连接WiFi （bash 脚本）_yayaleII的博客-CSDN博客_kali自动连接wifi</a></p><p><a href="https://blog.csdn.net/CTQ54250/article/details/108433590">kali（64位）在树莓派4B的安装配置_CTQ54250的博客-CSDN博客</a></p><p>我尝试了一下，但是说白了，还是没解决……</p><h3 id="使用屏幕键盘"><a href="#使用屏幕键盘" class="headerlink" title="使用屏幕键盘"></a>使用屏幕键盘</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install matchbox-keyboard</span><br></pre></td></tr></table></figure><p>在Raspberry Pi上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matchbox-keyboard</span><br></pre></td></tr></table></figure><p>通过SSH</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISPLAY=:0 matchbox-keyboard &amp;</span><br></pre></td></tr></table></figure><p>该命令将加载Raspberry Pi上的屏幕键盘软件。</p><h3 id="在树莓派上安装RDP服务"><a href="#在树莓派上安装RDP服务" class="headerlink" title="在树莓派上安装RDP服务"></a>在树莓派上安装RDP服务</h3><p>使用<a href="https://github.com/Har-Kuun/OneClickDesktop">Har-Kuun&#x2F;OneClickDesktop: A one-click script that installs a remote desktop environment on a Linux server with browser&#x2F;RDP&#x2F;VNC access. (github.com)</a></p><p>直接运行，但是在shell脚本里面需要把OS检查关掉（如果你像我一样用的是Kali）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">此脚本仅支持Ubuntu 18/20, Debian 10, 以及CentOS 7/8.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果您试图再其他版本的操作系统中安装，可以在下面禁用OS检查开关。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">请注意，在其他操作系统上安装此脚本可能会导致不可预料的错误。  请在安装前做好备份。</span></span><br><span class="line"></span><br><span class="line">OS_CHECK_ENABLED=OFF</span><br></pre></td></tr></table></figure><p>安装时可能会遇到依赖环境未安装的情况，直接用apt安装就行了</p><h4 id="libpng"><a href="#libpng" class="headerlink" title="libpng"></a>libpng</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libpng-dev -y</span><br></pre></td></tr></table></figure><h4 id="libjpeg"><a href="#libjpeg" class="headerlink" title="libjpeg"></a>libjpeg</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libpng-dev -y</span><br></pre></td></tr></table></figure><h4 id="Cairo"><a href="#Cairo" class="headerlink" title="Cairo"></a>Cairo</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libcairo2 libcairo2-dev -y</span><br></pre></td></tr></table></figure><h4 id="OSSP-UUID"><a href="#OSSP-UUID" class="headerlink" title="OSSP UUID"></a>OSSP UUID</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libossp-uuid-dev -y</span><br></pre></td></tr></table></figure><h4 id="无法编译"><a href="#无法编译" class="headerlink" title="无法编译"></a>无法编译</h4><p>因为OpenSSL升级到<code>3.0.0</code>然后不支持，所以直接降级回去就行了</p><p>默认是<code>OpenSSL 1.1.1m</code>，所以建议先编译完再升级（没事别<code>sudo apt upgrade -y</code>）</p><p><img src="https://cdn.bilicdn.tk/gh/Vikutorika/newassets@master/img/Raspberry-4B-Log/Xshell-20221201-223944.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="IoT" scheme="https://bili33.top/categories/IoT/"/>
    
    
    <category term="IoT" scheme="https://bili33.top/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>2022网鼎杯青龙组——个人WriteUP</title>
    <link href="https://bili33.top/posts/CTF-20220826-wangdingcup-qinglong/"/>
    <id>https://bili33.top/posts/CTF-20220826-wangdingcup-qinglong/</id>
    <published>2022-08-26T10:23:18.000Z</published>
    <updated>2022-08-30T11:44:08.751Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a><strong>签到</strong></h2><p>没啥技术含量，求助于万能的 <del>百度</del> Bing</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CTF-20220826-wangdingcup-qinglong/msedge-20220826-115011.png"></p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CTF-20220826-wangdingcup-qinglong/msedge-20220826-115015.png"></p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CTF-20220826-wangdingcup-qinglong/msedge-20220826-115020.png"></p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CTF-20220826-wangdingcup-qinglong/msedge-20220826-115024.png"></p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CTF-20220826-wangdingcup-qinglong/msedge-20220826-115028.png"></p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CTF-20220826-wangdingcup-qinglong/msedge-20220826-115033.png"></p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CTF-20220826-wangdingcup-qinglong/msedge-20220826-115036.png"></p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CTF-20220826-wangdingcup-qinglong/msedge-20220826-115042.png"></p><h2 id="crypto091"><a href="#crypto091" class="headerlink" title="crypto091"></a><strong>crypto091</strong></h2><p>小A鼓起勇气向女神索要电话号码，但女神一定要考考他。女神说她最近刚看了一篇发表于安全顶会USENIX Security 2021的论文，论文发现苹果AirDrop隔空投送功能的漏洞，该漏洞可以向陌生人泄露AirDrop发起者或接收者的电话号码和电子邮箱。小A经过一番努力，获得了女神手机在AirDrop时传输的手机号哈希值，但再往下就不会了，你能继续帮助他吗？小A只记得女神手机号是170号段首批放号的联通号码。</p><p>Hash：c22a563acc2a587afbfaaaa6d67bc6e628872b00bd7e998873881f7c6fdc62fc</p><p>flag格式：flag{13位电话号码（纯数字，含国家代码）}</p><ul><li>170号段首批放号的联通号码：1709</li><li>限定做法：Hash爆破</li><li>Hash为64位，因此Hash的计算方法是<code>sha256</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">prefix = <span class="string">&#x27;861709&#x27;</span> <span class="comment"># 联通首批放号的电话号码头</span></span><br><span class="line">compare_hash = <span class="string">&#x27;c22a563acc2a587afbfaaaa6d67bc6e628872b00bd7e998873881f7c6fdc62fc&#x27;</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10000000</span>):</span><br><span class="line">    to_hash = prefix+<span class="string">&#x27;&#123;:0&gt;7&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i))<span class="comment"># 这么写主要是为了构造电话号码的格式</span></span><br><span class="line">    to_compare_hash=hashlib.sha256(to_hash.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(to_hash, to_compare_hash)</span><br><span class="line">    <span class="keyword">if</span> to_compare_hash == compare_hash:</span><br><span class="line">        result = prefix+<span class="built_in">str</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CTF-20220826-wangdingcup-qinglong/WindowsTerminal-20220826-115133.png"></p><h2 id="Hash爆破脚本"><a href="#Hash爆破脚本" class="headerlink" title="Hash爆破脚本"></a>Hash爆破脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">salt = <span class="built_in">input</span>(<span class="string">&#x27;salt: &#x27;</span>)</span><br><span class="line">target = <span class="built_in">input</span>(<span class="string">&#x27;target: &#x27;</span>)</span><br><span class="line">ls = string.ascii_letters + string.digits</span><br><span class="line">res = permutations(ls,<span class="number">4</span>)</span><br><span class="line">result = <span class="string">&#x27;empty&#x27;</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> res:</span><br><span class="line">    XXXX = _[<span class="number">0</span>]+_[<span class="number">1</span>]+_[<span class="number">2</span>]+_[<span class="number">3</span>]</span><br><span class="line">    to_hash = XXXX+salt</span><br><span class="line">    <span class="keyword">if</span> hashlib.sha256(to_hash.encode()).hexdigest() == target: </span><br><span class="line">        result = XXXX</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>用于解决题目提示<code>XXXX + 一串salt == Hash值</code>的开头问题，因为已经很多次遇到这种问题了，所以写了个脚本来爆破，只需要输入对应的salt和hash就可以解出来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CTF" scheme="https://bili33.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://bili33.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Ticwatch Pro 3 使用体验报告</title>
    <link href="https://bili33.top/posts/Ticwatch-pro-3-experience/"/>
    <id>https://bili33.top/posts/Ticwatch-pro-3-experience/</id>
    <published>2022-08-23T04:00:54.000Z</published>
    <updated>2022-08-30T11:45:15.275Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近因为游泳，带着我的小米手环6，结果第二天游泳下来发现，它的屏幕不好使了，有鬼触的现象，于是就想换一块表</p><p>因为身边用OPPO Watch 2的人比较多，我又不想跟他们用一样的东西，于是我另辟蹊径，找其他的表</p><p>一开始看到米表，但是据说配置拉胯，就不考虑了，然后看到了出门问问家的Ticwatch pro 3，这是一个搭载着Google WearOS的智能手表，不过当然有着中国化的成分（指删除大量谷歌服务）</p><p>跟鱼子市场的卖家进行大量沟通后，我以合适的价格拿下了这块表</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/Ticwatch-pro-3-experience/QQ%E5%9B%BE%E7%89%8720220823120334.jpg"></p><p>接着就开始折腾了，拿到手是一块啥东西都没设置的新表，会进入“新手引导”模式，我也是花费了一定的时间才弄好</p><hr><h2 id="折腾环节"><a href="#折腾环节" class="headerlink" title="折腾环节"></a>折腾环节</h2><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/Ticwatch-pro-3-experience/about.png"></p><p>按下右上方的按键就可以打开启动器，从启动器打开软件</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/Ticwatch-pro-3-experience/launcher.png"></p><h3 id="从应用商店安装软件"><a href="#从应用商店安装软件" class="headerlink" title="从应用商店安装软件"></a>从应用商店安装软件</h3><p>官方的应用商店就跟App Store一样，一键下载安装就行，其实没啥难度，这里就附几张图吧</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/Ticwatch-pro-3-experience/screen(4).png.png"></p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/Ticwatch-pro-3-experience/screen(5).png.png"></p><h3 id="使用adb安装软件"><a href="#使用adb安装软件" class="headerlink" title="使用adb安装软件"></a>使用adb安装软件</h3><h4 id="使用计算机从adb安装软件"><a href="#使用计算机从adb安装软件" class="headerlink" title="使用计算机从adb安装软件"></a>使用计算机从adb安装软件</h4><p>这个要求打开adb，跟手机的开启方法一样，连续点击版本号开启开发者选项，然后在开发者选项里面找到<code>adb调试</code>，把它和<code>通过WLAN调试</code>都打开</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/Ticwatch-pro-3-experience/screen(3).png.png"></p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/Ticwatch-pro-3-experience/screen(6).png.png"></p><p>让手表和电脑连到同一个WIFI，查看手表的IP地址，接着电脑输入<code>adb connect &lt;ip&gt;</code>就可以连接到手表了，然后使用<code>adb install &lt;apk&gt;</code>就能安装软件了</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/Ticwatch-pro-3-experience/WindowsTerminal-20220823-121709.png"></p><h4 id="使用第三方应用商店安装软件"><a href="#使用第三方应用商店安装软件" class="headerlink" title="使用第三方应用商店安装软件"></a>使用第三方应用商店安装软件</h4><p>这里我用了一个叫做唯趣应用商店的东西（官网：<a href="http://etralab.top/etralab_appstore/html/select_install_method_android.html">唯趣应用商店 - 下载 (etralab.top)</a>），本质也是用adb的，因为手表的<code>软件包管理</code>被阉割了，所以我们只能通过adb来装东西</p><p>这是一个手表上的应用商店，找到自己想要的软件直接下载安装就行了</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/Ticwatch-pro-3-experience/screen(7).png.png"></p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/Ticwatch-pro-3-experience/screen(8).png.png"></p><h3 id="使用微信儿童手表版"><a href="#使用微信儿童手表版" class="headerlink" title="使用微信儿童手表版"></a>使用微信儿童手表版</h3><p>为什么我要单开一个标题给这个内容，因为自带的绿色微信需要连接手机同步使用，这就违背了我用它的理念，我就是要脱离手机使用</p><p>隔壁OPPO Watch可以使用微信手表版，但是TWP3不支持，因为微信没有给LICENSE给TWP3，那就只能借用LICENSE了</p><p>我借了块OPPO Watch来提取它的LICENSE，首先打开OW的adb调试，连接到电脑</p><p>然后输入以下命令来获取LICENSE</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings list global</span><br></pre></td></tr></table></figure><p>（图为TWP3的配置，因为忘记截图了，然后我已经放进去了，就直接拿来顶替了）</p><p>我们找到以下内容，把这些内容先保存起来</p><table><thead><tr><th>字段类型</th><th>名字</th><th>相关作用</th></tr></thead><tbody><tr><td>int</td><td>ilink_product_id</td><td>产品id</td></tr><tr><td>int</td><td>ilink_key_version</td><td>版本</td></tr><tr><td>int</td><td>ilink_support</td><td>ilink_support &#x3D;1表示手表支持运行微信</td></tr><tr><td>string</td><td>ilink_device_id</td><td>设备id</td></tr><tr><td>String</td><td>ilink_device_signature</td><td>验证签名</td></tr></tbody></table><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/Ticwatch-pro-3-experience/WindowsTerminal-20220823-120021.png"></p><p>然后连接到TWP3，使用命令来写入配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global ilink_device_id <span class="string">&quot;device_id&quot;</span></span><br><span class="line">adb shell settings put global ilink_device_signature <span class="string">&quot;device_signature&quot;</span></span><br><span class="line">adb shell settings put global ilink_key_version <span class="string">&quot;1&quot;</span></span><br><span class="line">adb shell settings put global ilink_product_id <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">adb shell settings put global ilink_support <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>写入后，再次打开微信儿童版就可以扫码登录使用了</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/Ticwatch-pro-3-experience/Wechatkid.png"></p><h3 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>带有ESIM确实可以脱离手机使用，还可以刷一刷B站（用腕上哔哩），看看新闻啥的，特别符合我现在的状态。有的时候跟群友用QQ吹水或者用微信跟我妈聊会天，完全OK</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>圆屏毕竟不是OW的方屏，很多手机的APP装上TWP3后会因为屏幕的限制而变得无法使用（如Outlook），而且TWP3阉割了Android Webview组件，导致很多东西用不了（直接闪退，例如在QQ邮箱阅读邮件）</p><p>另外，没有闪充，充电很慢，而且配的线是2PIN的，手表有4个金属触点，换言之就是没有数据传输功能（晚点自造线去）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，使用体验跟价格是匹配的，能够满足我的日常需求，但你要问我推不推荐购买，我只能说现阶段OW3可能更好一些</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Daily" scheme="https://bili33.top/categories/Daily/"/>
    
    
    <category term="Daily" scheme="https://bili33.top/tags/Daily/"/>
    
  </entry>
  
  <entry>
    <title>日常吐槽10：我的域名被停止解析了 —— 一段时间</title>
    <link href="https://bili33.top/posts/diary10/"/>
    <id>https://bili33.top/posts/diary10/</id>
    <published>2022-07-23T15:10:55.000Z</published>
    <updated>2022-08-30T11:44:38.087Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这件事还得从群里的兄弟那里说起（右图）<img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/diary10/TIM-20220723-232852.png"></p><p>主要是我这边没办法用个人身份备案，然后有些东西没有备案就很恼人，尤其是最近收到的Leancloud国际版不对大陆用户提供服务的通知</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/diary10/ApplicationFrameHost-20220723-235057.png"></p><p>这就搞得没备案会让我陷入被动（特别是在某些服务上面），那没办法啦，既然有能够弄企备的方法，那就去弄一个吧</p><p>然后我就找上门了，就像下面这样</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/diary10/TIM--20220724-065607.png"><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/diary10/TIM-20220724-065625.png"></p><p>然后我就开始等待了，按照对面的说法我前面还有一个人，然后备案要等14-30天</p><p>结果某一天，别人告诉我服务炸了</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/diary10/QQ%E5%9B%BE%E7%89%8720220724070203.jpg"></p><p>然后我就去排查，看我的腾讯云上TS正在正常运行，但是就是连不到</p><p>与此同时，我的MC服务器也连接不到了，但是BungeeCord还在正常运行</p><p>我就猜是不是域名解析掉了，我就去问备案那边，他说确实是</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/diary10/TIM-20220724-070411.png"></p><p>那有啥办法嘛，只能等了呗</p><p>我就把我的必要服务开了第二个域名，例如我的BLOG开在了<a href="https://blog.ninym.top/">https://blog.ninym.top</a>上面，前几天做的<a href="https://linkcheck.bili33.top/">hexo域名检测工具</a>开在了<a href="https://linkcheck.ninym.top/">https://linkcheck.ninym.top</a></p><p>然后把部分Github仓库涉及到文档在我的网站上的加一条备用文档链接，然后陷入无尽的等待……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="diary" scheme="https://bili33.top/categories/diary/"/>
    
    
    <category term="diary" scheme="https://bili33.top/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>Vercel搭建反向代理</title>
    <link href="https://bili33.top/posts/vercel-reverse-proxy/"/>
    <id>https://bili33.top/posts/vercel-reverse-proxy/</id>
    <published>2022-07-18T14:04:45.000Z</published>
    <updated>2022-08-30T11:45:24.356Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>首先你需要安装一下vercel的命令行工具，使用npm进行安装（需要安装nodejs，没安装的自己去下一个）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g vercel</span><br></pre></td></tr></table></figure><p>当然你也可以用cnpm安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -g vercel</span><br></pre></td></tr></table></figure><p>安装完后可以使用<code>vercel -v</code>来看看是否安装成功了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vercel -v</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; Vercel CLI 24.2.4</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; 24.2.4</span></span><br></pre></td></tr></table></figure><p>接着把下面这些内容复制到一个json文件里面</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/(.*)&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://bili33.top/$1&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中，我的域名那里可以改成你想要反代的网站的域名，例如填写<code>cdn.jsdelivr.net</code>，就可以按照jsdelivr的格式去使用它的CDN，例如</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/(.*)&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/$1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://bili33.top&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;redirects&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/npm/(.*)&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里<code>redirects</code>是访问特定的route的时候进行重定向，可以达到禁止访问的目的（但是实测好像并不太行）</p><p>更多关于json文件的适用方法，可以参照<a href="https://vercel.com/docs/project-configuration">https://vercel.com/docs/project-configuration</a></p><p>写完json文件以后，就开始对vercel的cli进行验证，使用<code>vercel login</code>进行登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vercel login</span><br><span class="line">Vercel CLI 24.2.4</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Log <span class="keyword">in</span> to Vercel (Use arrow keys)</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Continue with GitHub</span></span><br><span class="line">  Continue with GitLab</span><br><span class="line">  Continue with Bitbucket</span><br><span class="line">  Continue with Email</span><br><span class="line">  Continue with SAML Single Sign-On</span><br><span class="line">  ─────────────────────────────────</span><br><span class="line">  Abort</span><br></pre></td></tr></table></figure><p>按上下键可以选择登录方式，我就直接用Github登录了，会返回一个登录地址，可以直接在浏览器打开</p><p>登录完成后会像我下面这个这么提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vercel login</span><br><span class="line">Vercel CLI 24.2.4</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Log <span class="keyword">in</span> to Vercel github</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Success! GitHub authentication complete <span class="keyword">for</span> &lt;your email&gt;</span></span><br><span class="line">Congratulations! You are now logged in. In order to deploy something, run `vercel`.</span><br><span class="line">💡  Connect your Git Repositories to deploy every branch push automatically (https://vercel.link/git).</span><br></pre></td></tr></table></figure><p>接着我们对刚刚的json文件进行部署，使用下面的命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel -A &lt;name&gt;.json --prod</span><br></pre></td></tr></table></figure><p>这里的json的文件名要指定为你刚刚设置的文件，<code>--prod</code>是推入生产环境，按照提示输入就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vercel -A &lt;name&gt;.json --prod</span><br><span class="line">Vercel CLI 24.2.4</span><br><span class="line">❗️  Your Project was either deleted, transferred to a new Team, or you don’t have access to it anymore.</span><br><span class="line">? Set up and deploy “&lt;your folder&gt;”? [Y/n] y</span><br><span class="line">? Which scope do you want to deploy to? &lt;your username or team&gt;</span><br><span class="line">? Link to existing project? [y/N] n</span><br><span class="line">? What’s your project’s name? vercel-json</span><br><span class="line">? In which directory is your code located? ./</span><br><span class="line">No framework detected. Default Project Settings:</span><br><span class="line">- Build Command: `npm run vercel-build` or `npm run build`</span><br><span class="line">- Output Directory: `public` if it exists, or `.`</span><br><span class="line">- Development Command: None</span><br><span class="line">? Want to override the settings? [y/N] n</span><br><span class="line">🔗  Linked to &lt;user/project&gt; (created .vercel)</span><br><span class="line">🔍  Inspect: &lt;Your inspect link&gt; [961ms]</span><br><span class="line">✅  Production: &lt;Your production link&gt; [copied to clipboard] [10s]</span><br></pre></td></tr></table></figure><p>部署完后你就可以在Vercel中找到，并进行配置了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Tech" scheme="https://bili33.top/categories/Tech/"/>
    
    
    <category term="Tech" scheme="https://bili33.top/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>CSGO国服反和谐教程</title>
    <link href="https://bili33.top/posts/CSGO-Anti-LowViolence/"/>
    <id>https://bili33.top/posts/CSGO-Anti-LowViolence/</id>
    <published>2022-07-03T02:06:09.000Z</published>
    <updated>2022-08-30T11:44:03.493Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>其实这个东西非常简单，稍微翻一下文件就可以发现完美的操作了</p><p>先打开Steam，右键CSGO，选择<code>属性</code>，在左边的<code>本地文件</code>里面选择<code>浏览</code></p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CSGO-Anti-LowViolence/steam-20220703-100832.png"></p><p>这会打开你的CSGO游戏文件夹，打开<code>csgo</code>文件夹，稍微翻一下就可以发现开头为<code>pakxv</code>的几个文件，有很明显的<code>audiochinese</code> <code>perfectworld</code> <code>lowviolence</code>字样，把它们删了就好了</p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CSGO-Anti-LowViolence/explorer-20220703-100949.png"></p><blockquote><p>注：每次CSGO更新都要进行这个操作！</p></blockquote><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CSGO-Anti-LowViolence/TheGoodYouth.jpg"></p><p><img src="https://cdn.bili33.top/gh/Vikutorika/assets@master/img/CSGO-Anti-LowViolence/AntiViolence-Blood.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Games" scheme="https://bili33.top/categories/Games/"/>
    
    
    <category term="Games" scheme="https://bili33.top/tags/Games/"/>
    
  </entry>
  
</feed>
